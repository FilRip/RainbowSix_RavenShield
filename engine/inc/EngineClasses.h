/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(SceneStarted)
AUTOGENERATE_NAME(SceneEnded)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(NotifyLevelChange)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(KApplyForce)
AUTOGENERATE_NAME(KImpact)
AUTOGENERATE_NAME(KSkelConvulse)
AUTOGENERATE_NAME(KVelDropBelow)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(GetLocalLogFileName)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(KForceExceed)
AUTOGENERATE_NAME(StopPlayFiring)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(KVehicleUpdateParams)
AUTOGENERATE_NAME(KDriverEnter)
AUTOGENERATE_NAME(KDriverLeave)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(GetViewRotation)
AUTOGENERATE_NAME(EyePosition)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(ReceivedWeapons)
AUTOGENERATE_NAME(ProcessHeart)
AUTOGENERATE_NAME(Initialize)
AUTOGENERATE_NAME(ToggleRadar)
AUTOGENERATE_NAME(ActionStart)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(MonitoredPawnAlert)
AUTOGENERATE_NAME(EndClimbLadder)
AUTOGENERATE_NAME(R6DeadEndedMoving)
AUTOGENERATE_NAME(RenderFirstPersonGun)
AUTOGENERATE_NAME(NewServerState)
AUTOGENERATE_NAME(LightUpdateDirect)
AUTOGENERATE_NAME(ServerDisconnected)
AUTOGENERATE_NAME(PlayWeaponAnimation)
AUTOGENERATE_NAME(ConnectionFailed)
AUTOGENERATE_NAME(GameTypeUseNbOfTerroristToSpawn)
AUTOGENERATE_NAME(R6QueryCircumstantialAction)
AUTOGENERATE_NAME(NotifyAfterLevelChange)
AUTOGENERATE_NAME(GetReticuleInfo)
AUTOGENERATE_NAME(SaveAndResetData)
AUTOGENERATE_NAME(IsGameTypePlayWithNonRainbowNPCs)
AUTOGENERATE_NAME(LogThis)
AUTOGENERATE_NAME(SetIdentifyTarget)
AUTOGENERATE_NAME(PawnIsMoving)
AUTOGENERATE_NAME(ReceivedEngineWeapon)
AUTOGENERATE_NAME(UpdateWeaponAttachment)
AUTOGENERATE_NAME(ClientSetNewViewTarget)
AUTOGENERATE_NAME(PreLogOut)
AUTOGENERATE_NAME(R6ConnectionFailed)
AUTOGENERATE_NAME(UserDisconnected)
AUTOGENERATE_NAME(IsGoggles)
AUTOGENERATE_NAME(RestartServer)
AUTOGENERATE_NAME(SetMatchResult)
AUTOGENERATE_NAME(ConvertKeyToLocalisation)
AUTOGENERATE_NAME(GameServiceTick)
AUTOGENERATE_NAME(UpdateShadow)
AUTOGENERATE_NAME(PawnStoppedMoving)
AUTOGENERATE_NAME(MenuLoadProfile)
AUTOGENERATE_NAME(Reset)
AUTOGENERATE_NAME(CanPlayIntroVideo)
AUTOGENERATE_NAME(CanPlayOutroVideo)
AUTOGENERATE_NAME(SaveRemoteServerSettings)
AUTOGENERATE_NAME(ShowWeaponParticules)
AUTOGENERATE_NAME(LaunchR6MainMenu)
AUTOGENERATE_NAME(R6ConnectionSuccess)
AUTOGENERATE_NAME(DeployWeaponBipod)
AUTOGENERATE_NAME(InitMultiPlayerOptions)
AUTOGENERATE_NAME(PostFadeRender)
AUTOGENERATE_NAME(StopAnimForRG)
AUTOGENERATE_NAME(GetSkins)
AUTOGENERATE_NAME(GetNbMods)
AUTOGENERATE_NAME(SetCurrentMod)
AUTOGENERATE_NAME(InitModMgr)
AUTOGENERATE_NAME(GetBackgroundsRoot)
AUTOGENERATE_NAME(R6MakeNoise)
AUTOGENERATE_NAME(R6ConnectionInterrupted)
AUTOGENERATE_NAME(R6ConnectionInProgress)
AUTOGENERATE_NAME(R6ProgressMsg)
AUTOGENERATE_NAME(GetCampaignDir)
AUTOGENERATE_NAME(GetPlayerCustomMission)
AUTOGENERATE_NAME(GetServerIni)
AUTOGENERATE_NAME(GetModKeyword)
AUTOGENERATE_NAME(GetModName)
AUTOGENERATE_NAME(GetVideosRoot)
AUTOGENERATE_NAME(SetPendingMODFromGSName)
AUTOGENERATE_NAME(IsMissionPack)
AUTOGENERATE_NAME(IsRavenShield)
AUTOGENERATE_NAME(ClientPBKickedOutMessage)
AUTOGENERATE_NAME(GetIniFilesDir)
AUTOGENERATE_NAME(GetGameServiceGameName)
AUTOGENERATE_NAME(InitAllModObjects)
AUTOGENERATE_NAME(AssertOnlyRS)
AUTOGENERATE_NAME(AssertOnlyMP)
AUTOGENERATE_NAME(GetUbiComClientVersion)

#ifndef NAMES_ONLY


class ENGINE_API UGameEngine : public UEngine
{
public:
    BITFIELD FramePresentPending:1 GCC_PACK(4);
    class ULevel* GLevel GCC_PACK(4);
    class ULevel* GEntry;
    class UPendingLevel* GPendingLevel;
    TArrayNoInit<FString> ServerActors;
    TArrayNoInit<FString> ServerPackages;
    FURL LastURL;
    FStringNoInit m_MapName;
    DECLARE_CLASS(UGameEngine,UEngine,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UGameEngine)
};

#define UCONST_IDC_ARROW 0
#define UCONST_IDC_SIZEALL 1
#define UCONST_IDC_SIZENESW 2
#define UCONST_IDC_SIZENS 3
#define UCONST_IDC_SIZENWSE 4
#define UCONST_IDC_SIZEWE 5
#define UCONST_IDC_WAIT 6

class ENGINE_API UPlayer : public UObject
{
public:
    BYTE SelectedCursor;
    BYTE u8WaitLaunchStatingSound;
    INT vfOut;
    INT vfExec;
    INT CurrentNetSpeed;
    INT ConfiguredInternetSpeed;
    INT ConfiguredLanSpeed;
    BITFIELD bWindowsMouseAvailable:1 GCC_PACK(4);
    BITFIELD bShowWindowsMouse:1;
    BITFIELD bSuspendPrecaching:1;
    FLOAT WindowsMouseX GCC_PACK(4);
    FLOAT WindowsMouseY;
    class APlayerController* Actor;
    class UInteraction* Console;
    FGuid m_ArmPatchGUID;
    class UInteractionMaster* InteractionMaster;
    TArrayNoInit<class UInteraction*> LocalInteractions;
    DECLARE_CLASS(UPlayer,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayer)
};

enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_Particle            =6,
    STY_Highlight           =7,
    STY_MAX                 =8,
};
enum ESoundOcclusion
{
    OCCLUSION_Default       =0,
    OCCLUSION_None          =1,
    OCCLUSION_BSP           =2,
    OCCLUSION_StaticMeshes  =3,
    OCCLUSION_MAX           =4,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Ambient            =1,
    SLOT_Guns               =2,
    SLOT_SFX                =3,
    SLOT_GrenadeEffect      =4,
    SLOT_Music              =5,
    SLOT_Talk               =6,
    SLOT_Speak              =7,
    SLOT_HeadSet            =8,
    SLOT_Menu               =9,
    SLOT_Instruction        =10,
    SLOT_StartingSound      =11,
    SLOT_MAX                =12,
};
enum ESoundVolume
{
    VOLUME_Music            =0,
    VOLUME_Voices           =1,
    VOLUME_FX               =2,
    VOLUME_Grenade          =3,
    VOLUME_MAX              =4,
};
enum ESendSoundStatus
{
    SSTATUS_SendToPlayer    =0,
    SSTATUS_SendToMPTeam    =1,
    SSTATUS_SendToAll       =2,
    SSTATUS_MAX             =3,
};
enum ELoadBankSound
{
    LBS_Fix                 =0,
    LBS_UC                  =1,
    LBS_Map                 =2,
    LBS_Gun                 =3,
    LBS_MAX                 =4,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_Sunlight             =20,
    LE_MAX                  =21,
};
enum EForceType
{
    FT_None                 =0,
    FT_DragAlong            =1,
    FT_MAX                  =2,
};
enum ETerroristNationality
{
    TN_Spanish1             =0,
    TN_Spanish2             =1,
    TN_German1              =2,
    TN_German2              =3,
    TN_Portuguese           =4,
    TN_MAX                  =5,
};
enum EHostageNationality
{
    HN_French               =0,
    HN_British              =1,
    HN_Spanish              =2,
    HN_Portuguese           =3,
    HN_Norwegian            =4,
    HN_MAX                  =5,
};
enum EVoicesPriority
{
    VP_Low                  =0,
    VP_Medium               =1,
    VP_High                 =2,
    VP_MAX                  =3,
};
enum eKillResult
{
    KR_None                 =0,
    KR_Wound                =1,
    KR_Incapacitate         =2,
    KR_Killed               =3,
    KR_MAX                  =4,
};
enum eStunResult
{
    SR_None                 =0,
    SR_Stunned              =1,
    SR_Dazed                =2,
    SR_KnockedOut           =3,
    SR_MAX                  =4,
};
enum EStance
{
    STAN_None               =0,
    STAN_Standing           =1,
    STAN_Crouching          =2,
    STAN_Prone              =3,
    STAN_MAX                =4,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Interpolating      =7,
    PHYS_MovingBrush        =8,
    PHYS_Spider             =9,
    PHYS_Trailer            =10,
    PHYS_Ladder             =11,
    PHYS_RootMotion         =12,
    PHYS_Karma              =13,
    PHYS_KarmaRagDoll       =14,
    PHYS_MAX                =15,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EDoubleClickDir
{
    DCLICK_None             =0,
    DCLICK_Left             =1,
    DCLICK_Right            =2,
    DCLICK_Forward          =3,
    DCLICK_Back             =4,
    DCLICK_Active           =5,
    DCLICK_Done             =6,
    DCLICK_MAX              =7,
};
enum EDisplayFlag
{
    DF_ShowOnlyInPlanning   =0,
    DF_ShowOnlyIn3DView     =1,
    DF_ShowInBoth           =2,
    DF_MAX                  =3,
};
enum ENoiseType
{
    NOISE_None              =0,
    NOISE_Investigate       =1,
    NOISE_Threat            =2,
    NOISE_Grenade           =3,
    NOISE_Dead              =4,
    NOISE_MAX               =5,
};
enum EPawnType
{
    PAWN_NotDefined         =0,
    PAWN_Rainbow            =1,
    PAWN_Terrorist          =2,
    PAWN_Hostage            =3,
    PAWN_All                =4,
    PAWN_MAX                =5,
};
enum ESoundType
{
    SNDTYPE_None            =0,
    SNDTYPE_Gunshot         =1,
    SNDTYPE_BulletImpact    =2,
    SNDTYPE_GrenadeImpact   =3,
    SNDTYPE_GrenadeLike     =4,
    SNDTYPE_Explosion       =5,
    SNDTYPE_PawnMovement    =6,
    SNDTYPE_Choking         =7,
    SNDTYPE_Talking         =8,
    SNDTYPE_Screaming       =9,
    SNDTYPE_Reload          =10,
    SNDTYPE_Equipping       =11,
    SNDTYPE_Dead            =12,
    SNDTYPE_Door            =13,
    SNDTYPE_MAX             =14,
};
enum ER6GameType
{
    RGM_AllMode             =0,
    RGM_StoryMode           =1,
    RGM_PracticeMode        =2,
    RGM_MissionMode         =3,
    RGM_TerroristHuntMode   =4,
    RGM_TerroristHuntCoopMode=5,
    RGM_HostageRescueMode   =6,
    RGM_HostageRescueCoopMode=7,
    RGM_HostageRescueAdvMode=8,
    RGM_DefendMode          =9,
    RGM_DefendCoopMode      =10,
    RGM_ReconMode           =11,
    RGM_ReconCoopMode       =12,
    RGM_DeathmatchMode      =13,
    RGM_TeamDeathmatchMode  =14,
    RGM_BombAdvMode         =15,
    RGM_EscortAdvMode       =16,
    RGM_LoneWolfMode        =17,
    RGM_SquadDeathmatch     =18,
    RGM_SquadTeamDeathmatch =19,
    RGM_TerroristHuntAdvMode=20,
    RGM_ScatteredHuntAdvMode=21,
    RGM_CaptureTheEnemyAdvMode=22,
    RGM_CountDownMode       =23,
    RGM_KamikazeMode        =24,
    RGM_NoRulesMode         =25,
    RGM_MAX                 =26,
};
enum EGameModeInfo
{
    GMI_None                =0,
    GMI_SinglePlayer        =1,
    GMI_Cooperative         =2,
    GMI_Adversarial         =3,
    GMI_Squad               =4,
    GMI_MAX                 =5,
};
enum EModeFlagOption
{
    MFO_Available           =0,
    MFO_NotAvailable        =1,
    MFO_MAX                 =2,
};
enum EHUDDisplayType
{
    HDT_Normal              =0,
    HDT_Hidden              =1,
    HDT_FadeIn              =2,
    HDT_Blink               =3,
    HDT_MAX                 =4,
};
enum EHUDElement
{
    HE_HealthAndName        =0,
    HE_Posture              =1,
    HE_ActionIcon           =2,
    HE_WeaponIconAndName    =3,
    HE_WeaponAttachment     =4,
    HE_Ammo                 =5,
    HE_Magazine             =6,
    HE_ROF                  =7,
    HE_TeamHealth           =8,
    HE_MovementMode         =9,
    HE_ROE                  =10,
    HE_WPAction             =11,
    HE_Reticule             =12,
    HE_WPIcon               =13,
    HE_OtherTeam            =14,
    HE_PressGoCodeKey       =15,
    HE_MAX                  =16,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DrawType             =9,
    DT_Particle             =10,
    DT_AntiPortal           =11,
    DT_FluidSurface         =12,
    DT_MAX                  =13,
};
#define UCONST_MAXSTEPHEIGHT 33.0
#define UCONST_MINFLOORZ 0.7
#define UCONST_TEAM_None 0x00000
#define UCONST_TEAM_Orders 0x00001
#define UCONST_TEAM_OpenDoor 0x00010
#define UCONST_TEAM_CloseDoor 0x00020
#define UCONST_TEAM_Grenade 0x00040
#define UCONST_TEAM_ClearRoom 0x00080
#define UCONST_TEAM_Move 0x00100
#define UCONST_TEAM_ClimbLadder 0x00200
#define UCONST_TEAM_SecureTerrorist 0x00400
#define UCONST_TEAM_EscortHostage 0x00800
#define UCONST_TEAM_DisarmBomb 0x01000
#define UCONST_TEAM_InteractDevice 0x02000
#define UCONST_TEAM_OpenAndClear 0x00090
#define UCONST_TEAM_OpenAndGrenade 0x00050
#define UCONST_TEAM_OpenGrenadeAndClear 0x000d0
#define UCONST_TEAM_GrenadeAndClear 0x000c0
#define UCONST_TEAM_MoveAndGrenade 0x00140
#define UCONST_c_iTeamNumHostage 0
#define UCONST_c_iTeamNumTerrorist 1
#define UCONST_c_iTeamNumAlpha 2
#define UCONST_c_iTeamNumBravo 3
#define UCONST_c_iTeamNumUnknow 4
#define UCONST_DEATHMSG_CONNECTIONLOST 1
#define UCONST_DEATHMSG_PENALTY 2
#define UCONST_DEATHMSG_KAMAKAZE 3
#define UCONST_DEATHMSG_SWITCHTEAM 4
#define UCONST_DEATHMSG_HOSTAGE_DIED 5
#define UCONST_DEATHMSG_HOSTAGE_KILLEDBY 6
#define UCONST_DEATHMSG_HOSTAGE_KILLEDBYTERRO 7
#define UCONST_DEATHMSG_RAINBOW_KILLEDBYTERRO 8
#define UCONST_DEATHMSG_KILLED_BY_BOMB 9
#define UCONST_TF_TraceActors 0x0001
#define UCONST_TF_Visibility 0x0002
#define UCONST_TF_LineOfFire 0x0004
#define UCONST_TF_SkipVolume 0x0008
#define UCONST_TF_ShadowCast 0x0010
#define UCONST_TF_SkipPawn 0x0020

struct AActor_eventR6QueryCircumstantialAction_Parms
{
    FLOAT fDistance;
    class AR6AbstractCircumstantialActionQuery* Query;
    class APlayerController* PlayerController;
};
struct AActor_eventTriggerEvent_Parms
{
    FName EventName;
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventSaveAndResetData_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* MessageClass;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventR6MakeNoise_Parms
{
    BYTE eType;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
    BITFIELD Attenuate;
};
struct AActor_eventTornOff_Parms
{
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventUsedBy_Parms
{
    class APawn* User;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventFinishedInterpolation_Parms
{
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventKApplyForce_Parms
{
    FVector Force;
    FVector Torque;
};
struct AActor_eventKSkelConvulse_Parms
{
};
struct AActor_eventKVelDropBelow_Parms
{
};
struct AActor_eventKImpact_Parms
{
    class AActor* Other;
    FVector pos;
    FVector impactVel;
    FVector impactNorm;
};
struct AActor_eventAnimEnd_Parms
{
    INT Channel;
};
struct AActor_eventProcessHeart_Parms
{
    FLOAT DeltaSeconds;
    FLOAT fMul1;
    FLOAT fMul2;
    BITFIELD ReturnValue;
};
struct AActor_eventGetReticuleInfo_Parms
{
    class APawn* ownerReticule;
    FString szName;
    BITFIELD ReturnValue;
};
class ENGINE_API AActor : public UObject
{
public:
    BYTE Physics;
    BYTE Role;
    BYTE RemoteRole;
    BYTE DrawType;
    BYTE AmbientGlow;
    BYTE MaxLights;
    BYTE Style;
    BYTE SoundPitch;
    BYTE SoundOcclusion;
    BYTE m_iTracedBone;
    BYTE LightType;
    BYTE LightEffect;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE ForceType;
    BYTE m_eDisplayFlag;
    BYTE m_u8SpritePlanningAngle;
    BYTE m_eStoryMode;
    BYTE m_eMissionMode;
    BYTE m_eTerroristHunt;
    BYTE m_eTerroristHuntCoop;
    BYTE m_eHostageRescue;
    BYTE m_eHostageRescueCoop;
    BYTE m_eHostageRescueAdv;
    BYTE m_eDefend;
    BYTE m_eDefendCoop;
    BYTE m_eRecon;
    BYTE m_eReconCoop;
    BYTE m_eDeathmatch;
    BYTE m_eTeamDeathmatch;
    BYTE m_eBomb;
    BYTE m_eEscort;
    BYTE m_eLoneWolf;
    BYTE m_eSquadDeathmatch;
    BYTE m_eSquadTeamDeathmatch;
    BYTE m_eTerroristHuntAdv;
    BYTE m_eScatteredHuntAdv;
    BYTE m_eCaptureTheEnemyAdv;
    BYTE m_eCountDown;
    BYTE m_eKamikaze;
    BYTE m_u8RenderDataLastUpdate;
    BYTE m_HeatIntensity;
    BYTE m_wTickFrequency;
    BYTE m_wNbTickSkipped;
    INT CollisionTag;
    INT LightingTag;
    INT ActorTag;
    INT KStepTag;
    INT m_iPlanningFloor_0;
    INT m_iPlanningFloor_1;
    INT m_bInWeatherVolume;
    INT m_iLastRenderCycles;
    INT m_iLastRenderTick;
    INT m_iTotalRenderCycles;
    INT m_iNbRenders;
    INT m_iTickCycles;
    INT m_iTraceCycles;
    INT m_iTraceLastTick;
    INT m_iTracedCycles;
    INT m_iTracedLastTick;
    BITFIELD bStatic:1 GCC_PACK(4);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD m_bR6Deletable:1;
    BITFIELD m_bUseR6Availability:1;
    BITFIELD m_bSkipHitDetection:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bDynamicLight:1;
    BITFIELD m_bDynamicLightOnlyAffectPawns:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bClientAnim:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD m_bHandleRelativeProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bDisturbFluidSurface:1;
    BITFIELD bOnlyAffectPawns:1;
    BITFIELD bShowOctreeNodes:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD m_bUseRagdoll:1;
    BITFIELD m_bForceBaseReplication:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bCompressedPosition:1;
    BITFIELD m_bReticuleInfo:1;
    BITFIELD m_bShowInHeatVision:1;
    BITFIELD m_bFirstTimeInZone:1;
    BITFIELD m_bBypassAmbiant:1;
    BITFIELD m_bRenderOutOfWorld:1;
    BITFIELD m_bSpawnedInGame:1;
    BITFIELD m_bResetSystemLog:1;
    BITFIELD m_bDeleteOnReset:1;
    BITFIELD m_bInAmbientRange:1;
    BITFIELD m_bPlayIfSameZone:1;
    BITFIELD m_bPlayOnlyOnce:1;
    BITFIELD m_bListOfZoneHearable:1;
    BITFIELD m_bIfDirectLineOfSight:1;
    BITFIELD m_bUseExitSounds:1;
    BITFIELD m_bSoundWasPlayed:1;
    BITFIELD m_bDrawFromBase:1;
    BITFIELD bHardAttach:1;
    BITFIELD m_bAllowLOD:1;
    BITFIELD bUnlit:1;
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bUseLightingFromBase:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bShouldBaseAtStartup:1;
    BITFIELD bPendingDelete:1;
    BITFIELD m_bUseDifferentVisibleCollide:1;
    BITFIELD m_b3DSound:1;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD m_bSeeThrough:1;
    BITFIELD m_bPawnGoThrough:1;
    BITFIELD m_bBulletGoThrough:1;
    BITFIELD m_bDoPerBoneTrace:1;
    BITFIELD bAutoAlignToTerrain:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bBlockKarma:1;
    BITFIELD m_bLogNetTraffic:1;
    BITFIELD bSpecialLit:1;
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLightChanged:1;
    BITFIELD m_bLightingVisibility:1;
    BITFIELD bIgnoreOutOfWorld:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BITFIELD m_bUseOriginalRotationInPlanning:1;
    BITFIELD bNetInitial:1;
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bLockLocation:1;
    BITFIELD bEdLocked:1;
    BITFIELD m_bPlanningAlwaysDisplay:1;
    BITFIELD m_bIsWalkable:1;
    BITFIELD m_bSpriteShowFlatInPlanning:1;
    BITFIELD m_bSpriteShownIn3DInPlanning:1;
    BITFIELD m_bSpriteShowOver:1;
    BITFIELD m_bHideInLowGoreLevel:1;
    BITFIELD m_bIsRealtime:1;
    BITFIELD m_bShouldHidePortal:1;
    BITFIELD m_bHidePortal:1;
    BITFIELD m_bOutlinedInPlanning:1;
    BITFIELD m_bNeedOutlineUpdate:1;
    BITFIELD m_bBatchesStaticLightingUpdated:1;
    BITFIELD m_bForceStaticLighting:1;
    BITFIELD m_bSkipTick:1;
    BITFIELD m_bTickOnlyWhenVisible:1;
    FLOAT LastRenderTime GCC_PACK(4);
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT LifeSpan;
    FLOAT LODBias;
    FLOAT m_fAmbientSoundRadius;
    FLOAT m_fSoundRadiusSaturation;
    FLOAT m_fSoundRadiusActivation;
    FLOAT m_fSoundRadiusLinearFadeDist;
    FLOAT m_fSoundRadiusLinearFadeEnd;
    FLOAT LatentFloat;
    FLOAT DrawScale;
    FLOAT m_fLightingScaleFactor;
    FLOAT SoundRadius;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    FLOAT m_fCircumstantialActionRange;
    FLOAT LightBrightness;
    FLOAT LightRadius;
    FLOAT Mass;
    FLOAT Buoyancy;
    FLOAT fLightValue;
    FLOAT m_fBoneRotationTransition;
    FLOAT ForceRadius;
    FLOAT ForceScale;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    FLOAT bCoronaMUL2XFactor;
    FLOAT m_fCoronaMinSize;
    FLOAT m_fCoronaMaxSize;
    FLOAT m_fAttachFactor;
    FLOAT m_fCummulativeTick;
    class AActor* Owner;
    class ALevelInfo* Level;
    class APawn* Instigator;
    class USound* AmbientSound;
    class USound* AmbientSoundStop;
    class AActor* m_CurrentAmbianceObject;
    class AActor* m_CurrentVolumeSound;
    class AActor* Base;
    class AActor* Deleted;
    class APhysicsVolume* PhysicsVolume;
    class UMaterial* Texture;
    class UMesh* Mesh;
    class UStaticMesh* StaticMesh;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    class UConvexVolume* AntiPortal;
    class AR6ColBox* m_collisionBox;
    class AR6ColBox* m_collisionBox2;
    class AActor* PendingTouch;
    class UKarmaParamsCollision* KParams;
    class AActor* m_AttachedTo;
    class AProjector* Shadow;
    class UStaticMesh* m_OutlineStaticMesh;
    FName Tag;
    FName InitialState;
    FName Group;
    FName Event;
    FName AttachTag;
    FName AttachmentBone;
    FName m_szSoundBoneName;
    class UClass* MessageClass;
    TArrayNoInit<class AZoneInfo*> m_ListOfZoneInfo;
    TArrayNoInit<class AActor*> Touching;
    TArrayNoInit<class AActor*> Attached;
    TArrayNoInit<class UMaterial*> Skins;
    TArrayNoInit<class UMaterial*> NightVisionSkins;
    TArrayNoInit<FDbgVectorInfo> m_dbgVectorInfo;
    TArrayNoInit<INT> m_OutlineIndices;
    TArrayNoInit<FStaticMeshBatchRenderInfo> m_Batches;
    FPointRegion Region;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    FMatrix HardRelMatrix;
    FVector DrawScale3D;
    FVector PrePivot;
    FColor m_fLightingAdditiveAmbiant;
    FVector m_vVisibleCenter;
    FRotator sm_Rotation;
    FRotator RotationRate;
    FRotator DesiredRotation;
    FVector ColLocation;
    FColor m_PlanningColor;
    INT NetTag;
    INT JoinedTag;
    BITFIELD bTicked:1 GCC_PACK(4);
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bPathTemp:1;
    class UMeshInstance* MeshInstance GCC_PACK(4);
    class ULevel* XLevel;
    TArrayNoInit<INT> Leaves;
    TArrayNoInit<INT> OctreeNodes;
    TArrayNoInit<FProjectorRelativeRenderInfo> Projectors;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    FAnimRep SimAnim;
    FIndexBufferPtr m_OutlineIndexBuffer;
    DECLARE_FUNCTION(execDrawText3D);
    DECLARE_FUNCTION(execDrawDashedLine);
    DECLARE_FUNCTION(execRenderLevelFromMe);
    DECLARE_FUNCTION(execSetFloorToDraw);
    DECLARE_FUNCTION(execInPlanningMode);
    DECLARE_FUNCTION(execSetPlanningMode);
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execCollidingActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execDynamicActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execReturnSavedFadeValue);
    DECLARE_FUNCTION(execSaveCurrentFadeValue);
    DECLARE_FUNCTION(execFadeSound);
    DECLARE_FUNCTION(execStopAllSoundsActor);
    DECLARE_FUNCTION(execAddAndFindBankInSound);
    DECLARE_FUNCTION(execAddSoundBank);
    DECLARE_FUNCTION(execStopAllSounds);
    DECLARE_FUNCTION(execChangeVolumeType);
    DECLARE_FUNCTION(execResetVolume_TypeSound);
    DECLARE_FUNCTION(execResetVolume_AllTypeSound);
    DECLARE_FUNCTION(execIsPlayingSound);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execFindSpot);
    DECLARE_FUNCTION(execR6Trace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execStopAllMusic);
    DECLARE_FUNCTION(execStopMusic);
    DECLARE_FUNCTION(execPlayMusic);
    DECLARE_FUNCTION(execKIsRagdollAvailable);
    DECLARE_FUNCTION(execKMakeRagdollAvailable);
    DECLARE_FUNCTION(execKRemoveAllBoneLifters);
    DECLARE_FUNCTION(execKRemoveLifterFromBone);
    DECLARE_FUNCTION(execKAddBoneLifter);
    DECLARE_FUNCTION(execKFreezeRagdoll);
    DECLARE_FUNCTION(execKGetSkelMass);
    DECLARE_FUNCTION(execKSetSkelVel);
    DECLARE_FUNCTION(execKEnableCollision);
    DECLARE_FUNCTION(execKDisableCollision);
    DECLARE_FUNCTION(execKGetActorGravScale);
    DECLARE_FUNCTION(execKSetActorGravScale);
    DECLARE_FUNCTION(execKSetBlockKarma);
    DECLARE_FUNCTION(execKSetStayUpright);
    DECLARE_FUNCTION(execKAddImpulse);
    DECLARE_FUNCTION(execKIsAwake);
    DECLARE_FUNCTION(execKWake);
    DECLARE_FUNCTION(execKGetImpactThreshold);
    DECLARE_FUNCTION(execKSetImpactThreshold);
    DECLARE_FUNCTION(execKGetCOMPosition);
    DECLARE_FUNCTION(execKGetCOMOffset);
    DECLARE_FUNCTION(execKSetCOMOffset);
    DECLARE_FUNCTION(execKGetRestitution);
    DECLARE_FUNCTION(execKSetRestitution);
    DECLARE_FUNCTION(execKGetFriction);
    DECLARE_FUNCTION(execKSetFriction);
    DECLARE_FUNCTION(execKGetDampingProps);
    DECLARE_FUNCTION(execKSetDampingProps);
    DECLARE_FUNCTION(execKGetInertiaTensor);
    DECLARE_FUNCTION(execKSetInertiaTensor);
    DECLARE_FUNCTION(execKGetMass);
    DECLARE_FUNCTION(execKSetMass);
    DECLARE_FUNCTION(execOnlyAffectPawns);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execGetRenderBoundingSphere);
    DECLARE_FUNCTION(execSetBoneRotation);
    DECLARE_FUNCTION(execAnimIsInGroup);
    DECLARE_FUNCTION(execGetAnimParams);
    DECLARE_FUNCTION(execSetBoneLocation);
    DECLARE_FUNCTION(execSetBoneDirection);
    DECLARE_FUNCTION(execSetBoneScale);
    DECLARE_FUNCTION(execLockRootMotion);
    DECLARE_FUNCTION(execDetachFromBone);
    DECLARE_FUNCTION(execAttachToBone);
    DECLARE_FUNCTION(execGetRootRotationDelta);
    DECLARE_FUNCTION(execGetRootLocationDelta);
    DECLARE_FUNCTION(execGetRootRotation);
    DECLARE_FUNCTION(execGetRootLocation);
    DECLARE_FUNCTION(execGetBoneRotation);
    DECLARE_FUNCTION(execGetBoneCoords);
    DECLARE_FUNCTION(execWasSkeletonUpdated);
    DECLARE_FUNCTION(execGetAnimBlendAlpha);
    DECLARE_FUNCTION(execAnimBlendToAlpha);
    DECLARE_FUNCTION(execAnimBlendParams);
    DECLARE_FUNCTION(execUnLinkSkelAnim);
    DECLARE_FUNCTION(execLinkMesh);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execGetNotifyChannel);
    DECLARE_FUNCTION(execEnableChannelNotify);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execClearChannel);
    DECLARE_FUNCTION(execIsTweening);
    DECLARE_FUNCTION(execFreezeAnimAt);
    DECLARE_FUNCTION(execStopAnimating);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRelativeLocation);
    DECLARE_FUNCTION(execSetRelativeRotation);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetDrawType);
    DECLARE_FUNCTION(execSetStaticMesh);
    DECLARE_FUNCTION(execSetDrawScale3D);
    DECLARE_FUNCTION(execSetDrawScale);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execLoadRandomBackgroundImage);
    DECLARE_FUNCTION(execGlobalIDToBytes);
    DECLARE_FUNCTION(execGlobalIDToString);
    DECLARE_FUNCTION(execConvertIntTimeToString);
    DECLARE_FUNCTION(execGetMapNameExt);
    DECLARE_FUNCTION(execGarbageCollect);
    DECLARE_FUNCTION(execUpdateGraphicOptions);
    DECLARE_FUNCTION(execAddMessageToConsole);
    DECLARE_FUNCTION(execEnableLoadingScreen);
    DECLARE_FUNCTION(execGetCanvas);
    DECLARE_FUNCTION(execIsVideoHardwareAtLeast64M);
    DECLARE_FUNCTION(execGetGameVersion);
    DECLARE_FUNCTION(execConvertGameTypeIntToEnum);
    DECLARE_FUNCTION(execReplaceTexture);
    DECLARE_FUNCTION(execLoadLoadingScreen);
    DECLARE_FUNCTION(execSetPBStatus);
    DECLARE_FUNCTION(execIsPBClientEnabled);
    DECLARE_FUNCTION(execGetServerBeacon);
    DECLARE_FUNCTION(execSetServerBeacon);
    DECLARE_FUNCTION(execGetMissionDescription);
    DECLARE_FUNCTION(execSaveServerOptions);
    DECLARE_FUNCTION(execGetServerOptions);
    DECLARE_FUNCTION(execNativeNonUbiMatchMakingPassword);
    DECLARE_FUNCTION(execNativeNonUbiMatchMakingAddress);
    DECLARE_FUNCTION(execNativeNonUbiMatchMaking);
    DECLARE_FUNCTION(execNativeNonUbiMatchMakingHost);
    DECLARE_FUNCTION(execNativeStartedByGSClient);
    DECLARE_FUNCTION(execGetAvailableResolution);
    DECLARE_FUNCTION(execGetNbAvailableResolutions);
    DECLARE_FUNCTION(execGetTime);
    DECLARE_FUNCTION(execGetGameOptions);
    DECLARE_FUNCTION(execGetModMgr);
    DECLARE_FUNCTION(execSortFPlayerMenuInfo);
    DECLARE_FUNCTION(execSetPlayerSetupInfo);
    DECLARE_FUNCTION(execGetPlayerSetupInfo);
    DECLARE_FUNCTION(execSetFPlayerMenuInfo);
    DECLARE_FUNCTION(execGetFPlayerMenuInfo);
    DECLARE_FUNCTION(execIsAvailableInGameType);
    DECLARE_FUNCTION(execDbgAddLine);
    DECLARE_FUNCTION(execDbgVectorAdd);
    DECLARE_FUNCTION(execDbgVectorReset);
    DECLARE_FUNCTION(execGetTagInformations);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventR6QueryCircumstantialAction(FLOAT fDistance, class AR6AbstractCircumstantialActionQuery*& Query, class APlayerController* PlayerController)
    {
        AActor_eventR6QueryCircumstantialAction_Parms Parms;
        Parms.fDistance=fDistance;
        Parms.Query=Query;
        Parms.PlayerController=PlayerController;
        ProcessEvent(FindFunctionChecked(ENGINE_R6QueryCircumstantialAction),&Parms);
        Query=Parms.Query;
    }
    void eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTriggerEvent_Parms Parms;
        Parms.EventName=EventName;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventSaveAndResetData()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SaveAndResetData),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.MessageClass=MessageClass;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventR6MakeNoise(BYTE eType)
    {
        AActor_eventR6MakeNoise_Parms Parms;
        Parms.eType=eType;
        ProcessEvent(FindFunctionChecked(ENGINE_R6MakeNoise),&Parms);
    }
    void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch, BITFIELD Attenuate)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=bNoOverride;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTornOff()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TornOff),NULL);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    void eventUsedBy(class APawn* User)
    {
        AActor_eventUsedBy_Parms Parms;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
    }
    void eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    void eventFinishedInterpolation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),NULL);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    void eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        if(IsProbing(NAME_PhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
        }
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    void eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    void eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    void eventKApplyForce(FVector& Force, FVector& Torque)
    {
        AActor_eventKApplyForce_Parms Parms;
        Parms.Force=Force;
        Parms.Torque=Torque;
        ProcessEvent(FindFunctionChecked(ENGINE_KApplyForce),&Parms);
        Force=Parms.Force;
        Torque=Parms.Torque;
    }
    void eventKSkelConvulse()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KSkelConvulse),NULL);
    }
    void eventKVelDropBelow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVelDropBelow),NULL);
    }
    void eventKImpact(class AActor* Other, FVector pos, FVector impactVel, FVector impactNorm)
    {
        AActor_eventKImpact_Parms Parms;
        Parms.Other=Other;
        Parms.pos=pos;
        Parms.impactVel=impactVel;
        Parms.impactNorm=impactNorm;
        ProcessEvent(FindFunctionChecked(ENGINE_KImpact),&Parms);
    }
    void eventAnimEnd(INT Channel)
    {
        AActor_eventAnimEnd_Parms Parms;
        if(IsProbing(NAME_AnimEnd)) {
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
        }
    }
    BITFIELD eventProcessHeart(FLOAT DeltaSeconds, FLOAT& fMul1, FLOAT& fMul2)
    {
        AActor_eventProcessHeart_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaSeconds=DeltaSeconds;
        Parms.fMul1=fMul1;
        Parms.fMul2=fMul2;
        ProcessEvent(FindFunctionChecked(ENGINE_ProcessHeart),&Parms);
        fMul1=Parms.fMul1;
        fMul2=Parms.fMul2;
        return Parms.ReturnValue;
    }
    BITFIELD eventGetReticuleInfo(class APawn* ownerReticule, FString& szName)
    {
        AActor_eventGetReticuleInfo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ownerReticule=ownerReticule;
        Parms.szName=szName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetReticuleInfo),&Parms);
        szName=Parms.szName;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AActor)
};


class ENGINE_API AR6DecalsBase : public AActor
{
public:
    DECLARE_CLASS(AR6DecalsBase,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6DecalsBase)
};

enum EHitType
{
    HIT_Impact              =0,
    HIT_Ricochet            =1,
    HIT_Exit                =2,
    HIT_MAX                 =3,
};

class ENGINE_API AR6WallHit : public AR6DecalsBase
{
public:
    BYTE m_eSoundType;
    BYTE m_eHitType;
    BITFIELD m_bGoreLevelHigh:1 GCC_PACK(4);
    BITFIELD m_bPlayEffectSound:1;
    class USound* m_ImpactSound GCC_PACK(4);
    class USound* m_ExitSound;
    class USound* m_RicochetSound;
    class UClass* m_pSparksIn;
    TArrayNoInit<class UTexture*> m_DecalTexture;
    DECLARE_CLASS(AR6WallHit,AR6DecalsBase,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6WallHit)
};

enum eDecalType
{
    DECAL_Footstep          =0,
    DECAL_Bullet            =1,
    DECAL_BloodSplats       =2,
    DECAL_BloodBaths        =3,
    DECAL_GrenadeDecals     =4,
    DECAL_MAX               =5,
};

class ENGINE_API AR6DecalManager : public AActor
{
public:
    BITFIELD m_bActive:1 GCC_PACK(4);
    class AR6DecalGroup* m_FootSteps GCC_PACK(4);
    class AR6DecalGroup* m_WallHit;
    class AR6DecalGroup* m_BloodSplats;
    class AR6DecalGroup* m_BloodBaths;
    class AR6DecalGroup* m_GrenadeDecals;
    DECLARE_FUNCTION(execKillDecal);
    DECLARE_FUNCTION(execAddDecal);
    DECLARE_CLASS(AR6DecalManager,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6DecalManager)
};

enum eDecalType
{
    DECAL_Footstep          =0,
    DECAL_Bullet            =1,
    DECAL_BloodSplats       =2,
    DECAL_BloodBaths        =3,
    DECAL_GrenadeDecals     =4,
    DECAL_MAX               =5,
};

class ENGINE_API AR6DecalGroup : public AActor
{
public:
    BYTE m_Type;
    INT m_MaxSize;
    INT m_iDecalPos;
    BITFIELD m_bActive:1 GCC_PACK(4);
    TArrayNoInit<class AR6Decal*> m_Decals GCC_PACK(4);
    DECLARE_FUNCTION(execDeActivateGroup);
    DECLARE_FUNCTION(execActivateGroup);
    DECLARE_FUNCTION(execKillDecal);
    DECLARE_FUNCTION(execAddDecal);
    DECLARE_CLASS(AR6DecalGroup,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6DecalGroup)
};

enum EProjectorBlending
{
    PB_None                 =0,
    PB_Modulate             =1,
    PB_Modulate1X           =2,
    PB_AlphaBlend           =3,
    PB_Add                  =4,
    PB_Darken               =5,
    PB_MAX                  =6,
};

struct AProjector_eventUpdateShadow_Parms
{
};
struct AProjector_eventLightUpdateDirect_Parms
{
    FVector LightDir;
    FLOAT LightDist;
    BYTE bOpacity;
};
class ENGINE_API AProjector : public AActor
{
public:
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD m_bClipStaticMesh:1;
    BITFIELD m_bRelative:1;
    BITFIELD m_bDirectionalModulation:1;
    BITFIELD m_bProjectTransparent:1;
    BITFIELD m_bProjectOnlyOnFloor:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    BITFIELD bLightInfluenced:1;
    class UMaterial* ProjTexture GCC_PACK(4);
    class UTexture* GradientTexture;
    FName ProjectTag;
    FPlane FrustumPlanes[6];
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
    DECLARE_FUNCTION(execDetachActor);
    DECLARE_FUNCTION(execAttachActor);
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    void eventUpdateShadow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateShadow),NULL);
    }
    void eventLightUpdateDirect(FVector LightDir, FLOAT LightDist, BYTE bOpacity)
    {
        AProjector_eventLightUpdateDirect_Parms Parms;
        Parms.LightDir=LightDir;
        Parms.LightDist=LightDist;
        Parms.bOpacity=bOpacity;
        ProcessEvent(FindFunctionChecked(ENGINE_LightUpdateDirect),&Parms);
    }
    DECLARE_CLASS(AProjector,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjector)
};


class ENGINE_API AR6Decal : public AProjector
{
public:
    BITFIELD m_bActive:1 GCC_PACK(4);
    BITFIELD m_bNeedScale:1;
    DECLARE_CLASS(AR6Decal,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6Decal)
};


class ENGINE_API ADecoVolumeObject : public AActor
{
public:
    DECLARE_CLASS(ADecoVolumeObject,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoVolumeObject)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API ADecorationList : public AKeypoint
{
public:
    TArrayNoInit<FDecorationType> Decorations;
    DECLARE_CLASS(ADecorationList,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecorationList)
};


class ENGINE_API ALookTarget : public AKeypoint
{
public:
    DECLARE_CLASS(ALookTarget,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALookTarget)
};


class ENGINE_API AAIScript : public AKeypoint
{
public:
    BITFIELD bNavigate:1 GCC_PACK(4);
    BITFIELD bLoggingEnabled:1;
    class AAIMarker* myMarker GCC_PACK(4);
    class UClass* ControllerClass;
    DECLARE_CLASS(AAIScript,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIScript)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};

enum EAffect
{
    AFFECT_ViewportCamera   =0,
    AFFECT_Actor            =1,
    AFFECT_MAX              =2,
};

struct ASceneManager_eventSceneEnded_Parms
{
};
struct ASceneManager_eventSceneStarted_Parms
{
};
class ENGINE_API ASceneManager : public AInfo
{
public:
    BYTE Affect;
    BITFIELD bLooping:1 GCC_PACK(4);
    BITFIELD bCinematicView:1;
    BITFIELD m_bFixedPosition:1;
    class AActor* AffectedActor GCC_PACK(4);
    FName PlayerScriptTag;
    FName NextSceneTag;
    TArrayNoInit<class UMatAction*> Actions;
    FStringNoInit m_Alias;
    BITFIELD m_bPreviewReplay:1 GCC_PACK(4);
    BITFIELD bIsRunning:1;
    BITFIELD bIsSceneStarted:1;
    FLOAT PctSceneComplete GCC_PACK(4);
    FLOAT SceneSpeed;
    FLOAT TotalSceneTime;
    FLOAT CurrentTime;
    class UMatAction* m_PreviousAction;
    class UMatAction* CurrentAction;
    class AActor* Viewer;
    class APawn* OldPawn;
    TArrayNoInit<FVector> SampleLocations;
    TArrayNoInit<class UMatSubAction*> SubActions;
    FOrientation CamOrientation;
    FOrientation PrevOrientation;
    FInterpolator RotInterpolator;
    FVector CameraShake;
    FVector DollyOffset;
    FStringNoInit m_DisplayString;
    DECLARE_FUNCTION(execSceneDestroyed);
    DECLARE_FUNCTION(execTerminateAIAction);
    DECLARE_FUNCTION(execGetTotalSceneTime);
    void eventSceneEnded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneEnded),NULL);
    }
    void eventSceneStarted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneStarted),NULL);
    }
    DECLARE_CLASS(ASceneManager,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASceneManager)
};


class ENGINE_API AActorManager : public ASceneManager
{
public:
    DECLARE_CLASS(AActorManager,ASceneManager,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AActorManager)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API ATeamInfo : public AReplicationInfo
{
public:
    INT Size;
    INT TeamIndex;
    FLOAT Score;
    class UTexture* TeamIcon;
    class AActor* Flag;
    class UClass* DefaultPlayerClass;
    FColor TeamColor;
    FColor AltTeamColor;
    FStringNoInit TeamName;
    FStringNoInit ColorNames[4];
    DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeamInfo)
};

#define UCONST_RSS_PlayersConnectingStage 0
#define UCONST_RSS_CountDownStage 1
#define UCONST_RSS_InPreGameState 2
#define UCONST_RSS_InGameState 3
#define UCONST_RSS_EndOfMatch 4

struct AGameReplicationInfo_eventSaveRemoteServerSettings_Parms
{
    FString NewServerFile;
};
struct AGameReplicationInfo_eventNewServerState_Parms
{
};
class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    BYTE m_eGameTypeFlag;
    BYTE m_bReceivedGameType;
    BYTE m_eOldServerState;
    BYTE m_eCurrectServerState;
    BYTE m_iNbWeaponsTerro;
    BYTE m_aRepMObjCompleted[16];
    BYTE m_aRepMObjFailed[16];
    BYTE m_bRepMObjInProgress;
    BYTE m_bRepMObjSuccess;
    BYTE m_bRepLastRoundSuccess;
    INT GoalScore;
    INT TimeLimit;
    INT ServerRegion;
    INT m_iMapIndex;
    INT m_iGameSvrGroupID;
    INT m_iGameSvrLobbyID;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD m_bShowPlayerStates:1;
    BITFIELD m_bInPostBetweenRoundTime:1;
    BITFIELD m_bServerAllowRadar:1;
    BITFIELD m_bRepAllowRadarOption:1;
    BITFIELD m_bGameOverRep:1;
    BITFIELD m_bRestartableByJoin:1;
    class ATeamInfo* Teams[2] GCC_PACK(4);
    class AActor* Winner;
    FStringNoInit GameName;
    FStringNoInit GameClass;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit m_aRepMObjDescription[16];
    FStringNoInit m_aRepMObjDescriptionLocFile[16];
    void eventSaveRemoteServerSettings(const FString& NewServerFile)
    {
        AGameReplicationInfo_eventSaveRemoteServerSettings_Parms Parms;
        Parms.NewServerFile=NewServerFile;
        ProcessEvent(FindFunctionChecked(ENGINE_SaveRemoteServerSettings),&Parms);
    }
    void eventNewServerState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NewServerState),NULL);
    }
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameReplicationInfo)
};

#define UCONST_m_cKillStat 0
#define UCONST_m_cDeathStat 1
#define UCONST_m_cRatioStat 2
#define UCONST_m_cMission 3
#define UCONST_m_cPlayTime 4

class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    INT Ping;
    INT NumLives;
    INT PlayerID;
    INT TeamID;
    INT iOperativeID;
    INT StartTime;
    INT TimeAcc;
    INT m_iKillCount;
    INT m_iKillCountForEvent;
    INT m_iRoundFired;
    INT m_iRoundsHit;
    INT m_iRoundsPlayed;
    INT m_iRoundsWon;
    INT m_iDeathCountForEvent;
    INT m_iBackUpKillCount;
    INT m_iBackUpRoundFired;
    INT m_iBackUpRoundsHit;
    INT m_iBackUpRoundsPlayed;
    INT m_iBackUpRoundsWon;
    INT m_iHealth;
    INT m_iRoundKillCount;
    INT m_iUniqueID;
    BITFIELD bIsFemale:1 GCC_PACK(4);
    BITFIELD bFeigningDeath:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    BITFIELD m_bPlayerReady:1;
    BITFIELD m_bJoinedTeamLate:1;
    BITFIELD m_bIsEscortedPilot:1;
    BITFIELD m_bIsBombMan:1;
    BITFIELD m_bAlreadyLoggedIn:1;
    BITFIELD m_bClientWillSubmitResult:1;
    FLOAT Score GCC_PACK(4);
    FLOAT Deaths;
    FLOAT m_iBackUpDeaths;
    class ADecoration* HasFlag;
    class AVolume* PlayerLocation;
    class ATeamInfo* Team;
    class UTexture* TalkTexture;
    class UClass* VoiceType;
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    FStringNoInit m_szUbiUserID;
    FStringNoInit m_szKillersName;
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};


class ENGINE_API APotentialClimbWatcher : public AInfo
{
public:
    DECLARE_CLASS(APotentialClimbWatcher,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APotentialClimbWatcher)
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
struct AStatLog_eventGetLocalLogFileName_Parms
{
    FString ReturnValue;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    BITFIELD bWorldBatcherError:1;
    BITFIELD bBatchLocal:1;
    FLOAT TimeStamp GCC_PACK(4);
    class AStatLog* LocalLog;
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    FString eventGetLocalLogFileName()
    {
        AStatLog_eventGetLocalLogFileName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLocalLogFileName),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AStatLog,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    INT LogAr;
    BITFIELD bWatermark:1 GCC_PACK(4);
    FStringNoInit StatLogFile GCC_PACK(4);
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

#define UCONST_K_NextDefaultMap -2

class ENGINE_API AMapList : public AInfo
{
public:
    FStringNoInit Maps[32];
    DECLARE_CLASS(AMapList,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMapList)
};


class ENGINE_API AR6MapList : public AMapList
{
public:
    BITFIELD m_bInit:1 GCC_PACK(4);
    FStringNoInit GameType[32] GCC_PACK(4);
    DECLARE_CLASS(AR6MapList,AMapList,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6MapList)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    BYTE DoubleClickMove;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD m_bCrawl:1;
    FLOAT TimeStamp GCC_PACK(4);
    FLOAT Delta;
    class ASavedMove* NextMove;
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    BYTE m_SoundZone;
    BITFIELD bFogZone:1 GCC_PACK(4);
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bClearToFogColor:1;
    BITFIELD m_bInDoor:1;
    BITFIELD m_bAlreadyPlayMusic:1;
    BITFIELD m_bAlternateEmittersActive:1;
    FLOAT DistanceFogStart GCC_PACK(4);
    FLOAT DistanceFogEnd;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    class ASkyZoneInfo* SkyZone;
    class UTexture* EnvironmentMap;
    class UI3DL2Listener* ZoneEffect;
    class USound* m_SinglePlayerMusic;
    FName ZoneTag;
    TArrayNoInit<class ATerrainInfo*> Terrains;
    TArrayNoInit<class USound*> m_StartingSounds;
    TArrayNoInit<class USound*> m_EnterSounds;
    TArrayNoInit<class USound*> m_ExitSounds;
    TArrayNoInit<class AEmitter*> m_AlternateWeatherEmitters;
    FColor DistanceFogColor;
    FVector m_vBoundLocation;
    FVector m_vBoundNormal;
    FVector m_vBoundScale;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    INT iWarpZone;
    INT numDestinations;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    FName ThisTag GCC_PACK(4);
    FCoords WarpCoords;
    FStringNoInit OtherSideURL;
    FStringNoInit Destinations[8];
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ER6SoundState
{
    BANK_UnloadGun          =0,
    BANK_UnloadAll          =1,
    BANK_MAX                =2,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};
enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum EPhysicsDetailLevel
{
    PDL_Low                 =0,
    PDL_Medium              =1,
    PDL_High                =2,
    PDL_MAX                 =3,
};
#define UCONST_RDC_CamFirstPerson 0x01
#define UCONST_RDC_CamThirdPerson 0x02
#define UCONST_RDC_CamFreeThirdP 0x04
#define UCONST_RDC_CamGhost 0x08
#define UCONST_RDC_CamFadeToBk 0x10
#define UCONST_RDC_CamTeamOnly 0x20

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
struct ALevelInfo_eventIsGameTypePlayWithNonRainbowNPCs_Parms
{
    FString szGameType;
    BITFIELD ReturnValue;
};
struct ALevelInfo_eventGameTypeUseNbOfTerroristToSpawn_Parms
{
    FString szGameType;
    BITFIELD ReturnValue;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    BYTE PhysicsDetailLevel;
    BYTE NetMode;
    BYTE m_eTerroristVoices;
    BYTE m_eHostageVoices;
    INT MaxRagdolls;
    INT HubStackLevel;
    INT R6PlanningMaxLevel;
    INT R6PlanningMinLevel;
    INT m_iMotionBlurIntensity;
    INT m_iLimitedSFXCount;
    INT iPBEnabled;
    BITFIELD bKStaticFriction:1 GCC_PACK(4);
    BITFIELD bKNoInit:1;
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD m_bInGamePlanningActive:1;
    BITFIELD m_bInGamePlanningZoomingIn:1;
    BITFIELD m_bInGamePlanningZoomingOut:1;
    BITFIELD m_bGameTypesInitialized:1;
    BITFIELD bNeverPrecache:1;
    BITFIELD m_bLogBandWidth:1;
    BITFIELD bNextItems:1;
    BITFIELD m_bUseDefaultMoralityRules:1;
    BITFIELD m_bShowDebugLine:1;
    BITFIELD m_bShowDebugLights:1;
    BITFIELD m_bShowDebugLODs:1;
    BITFIELD m_bShowOnlyTransparentSM:1;
    BITFIELD m_bNightVisionActive:1;
    BITFIELD m_bHeatVisionActive:1;
    BITFIELD m_bScopeVisionActive:1;
    BITFIELD m_bAllow3DRendering:1;
    BITFIELD m_bSkipMotionBlur:1;
    BITFIELD m_bPlaySound:1;
    BITFIELD m_bCanStartStartingSound:1;
    BITFIELD m_bSoundFadeFinish:1;
    BITFIELD m_bIsResettingLevel:1;
    BITFIELD m_bPBSvRunning:1;
    BITFIELD m_bHeartBeatOn:1;
    FLOAT TimeDilation GCC_PACK(4);
    FLOAT TimeSeconds;
    FLOAT PauseDelay;
    FLOAT KarmaTimeScale;
    FLOAT RagdollTimeScale;
    FLOAT KarmaGravScale;
    FLOAT m_fInGamePlanningZoomDistance;
    FLOAT PlayerDoppler;
    FLOAT Brightness;
    FLOAT m_fRainbowSkillMultiplier;
    FLOAT m_fTerroSkillMultiplier;
    FLOAT NextSwitchCountdown;
    FLOAT m_fTimeLimit;
    FLOAT m_fEndGamePauseTime;
    FLOAT m_fDbgNavPointDistance;
    FLOAT m_fDistanceHeartBeatVisible;
    class APlayerReplicationInfo* Pauser;
    class ULevelSummary* Summary;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    class UTexture* WireframeTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APhysicsVolume* PhysicsVolumeList;
    class AR6ActionSpot* m_ActionSpotList;
    class UMaterial* GreenTeamSkin;
    class UMaterial* GreenHeadSkin;
    class UMaterial* GreenGogglesSkin;
    class UMaterial* GreenHandSkin;
    class UMaterial* GreenMenuSkin;
    class UMesh* GreenMesh;
    class UStaticMesh* GreenHelmetMesh;
    class UMaterial* GreenHelmetSkin;
    class UMaterial* RedTeamSkin;
    class UMaterial* RedHeadSkin;
    class UMaterial* RedGogglesSkin;
    class UMaterial* RedHandSkin;
    class UMaterial* RedMenuSkin;
    class UMesh* RedMesh;
    class UStaticMesh* RedHelmetMesh;
    class UMaterial* RedHelmetSkin;
    class USound* m_sndMissionComplete;
    class AEmitter* m_WeatherEmitter;
    class AActor* m_WeatherViewTarget;
    class USound* m_sndPlayMissionIntro;
    class USound* m_sndPlayMissionExtro;
    class USound* m_SurfaceSwitchSnd;
    class USound* m_SurfaceSwitchForOtherPawnSnd;
    class USound* m_BodyFallSwitchSnd;
    class USound* m_BodyFallSwitchForOtherPawnSnd;
    class USound* m_StartingMusic;
    class AR6DecalManager* m_DecalManager;
    class UTexture* m_pScopeMaskTexture;
    class UTexture* m_pScopeAddTexture;
    class AR6AbstractHostageMgr* m_hostageMgr;
    class UR6AbstractTerroristMgr* m_terroristMgr;
    class UMaterial* m_pProneTrailMaterial;
    class UR6ServerInfo* m_ServerSettings;
    class AR6LimitedSFX* m_aLimitedSFX[6];
    class UTexture* m_tWritableMapTexture;
    class UClass* m_WeatherEmitterClass;
    class UClass* m_RepWeatherEmitterClass;
    class UClass* m_BreathingEmitterClass;
    TArrayNoInit<class UR6MissionObjectiveBase*> m_aMissionObjectives;
    TArrayNoInit<FWritableMapVertex> m_aCurrentStrip;
    TArrayNoInit<FWritableMapVertex> m_aWritableMapStrip;
    TArrayNoInit<FWritableMapStroke> m_aWritableMapTimeStamp;
    TArrayNoInit<FWritableMapIcon> m_aWritableMapIcons;
    TArrayNoInit<FGameTypeInfo> m_aGameTypeInfo;
    FVector CameraLocationDynamic;
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FVector R6PlanningMaxVector;
    FVector R6PlanningMinVector;
    FSoundZoneAudibleZones m_SoundZoneAudibleZones[64];
    FVector m_vPredVector;
    FVector m_vPredPredVector;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FStringNoInit VisibleGroups;
    FStringNoInit Song;
    FStringNoInit m_szGameTypeShown;
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit DefaultGameType;
    FStringNoInit NextURL;
    FStringNoInit GreenTeamPawnClass;
    FStringNoInit RedTeamPawnClass;
    FStringNoInit m_szMissionObjLocalization;
    FStringNoInit m_csVoicesOneLinersBankName;
    BYTE LevelAction;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    BITFIELD bPhysicsVolumesInitialized:1 GCC_PACK(4);
    FStringNoInit SelectedGroups GCC_PACK(4);
    DECLARE_FUNCTION(execNotifyMatchStart);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execPBNotifyServerTravel);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execGetCampaignNameFromParam);
    DECLARE_FUNCTION(execCallLogThisActor);
    DECLARE_FUNCTION(execResetLevelInNative);
    DECLARE_FUNCTION(execFinalizeLoading);
    DECLARE_FUNCTION(execSetBankSound);
    DECLARE_FUNCTION(execAddWritableMapIcon);
    DECLARE_FUNCTION(execAddEncodedWritableMapStrip);
    DECLARE_FUNCTION(execAddWritableMapPoint);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    BITFIELD eventIsGameTypePlayWithNonRainbowNPCs(const FString& szGameType)
    {
        ALevelInfo_eventIsGameTypePlayWithNonRainbowNPCs_Parms Parms;
        Parms.ReturnValue=0;
        Parms.szGameType=szGameType;
        ProcessEvent(FindFunctionChecked(ENGINE_IsGameTypePlayWithNonRainbowNPCs),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventGameTypeUseNbOfTerroristToSpawn(const FString& szGameType)
    {
        ALevelInfo_eventGameTypeUseNbOfTerroristToSpawn_Parms Parms;
        Parms.ReturnValue=0;
        Parms.szGameType=szGameType;
        ProcessEvent(FindFunctionChecked(ENGINE_GameTypeUseNbOfTerroristToSpawn),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};


struct AGameInfo_eventBroadcastLocalized_Parms
{
    class AActor* Sender;
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AGameInfo_eventBroadcast_Parms
{
    class AActor* Sender;
    FString Msg;
    FName type;
};
struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerController* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
struct AGameInfo_eventCanPlayOutroVideo_Parms
{
    BITFIELD ReturnValue;
};
struct AGameInfo_eventCanPlayIntroVideo_Parms
{
    BITFIELD ReturnValue;
};
struct AGameInfo_eventPreLogOut_Parms
{
    class APlayerController* ExitingPlayer;
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    BYTE Difficulty;
    BYTE m_eGameTypeFlag;
    INT GoreLevel;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    INT m_iCurrGameType;
    BITFIELD bRestartLevel:1 GCC_PACK(4);
    BITFIELD bPauseable:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD m_bChangedServerConfig:1;
    BITFIELD bAlreadyChanged:1;
    BITFIELD bLocalLog:1;
    BITFIELD bWorldLog:1;
    BITFIELD bLoggingGame:1;
    BITFIELD m_bGameStarted:1;
    BITFIELD m_bGameOver:1;
    BITFIELD m_bCompilingStats:1;
    BITFIELD m_bLadderStats:1;
    BITFIELD m_bUseClarkVoice:1;
    BITFIELD m_bPlayIntroVideo:1;
    BITFIELD m_bPlayOutroVideo:1;
    BITFIELD m_bPendingLevelExists:1;
    FLOAT GameSpeed GCC_PACK(4);
    FLOAT StartTime;
    class AMutator* BaseMutator;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    class ABroadcastHandler* BroadcastHandler;
    class AGameReplicationInfo* GameReplicationInfo;
    class AStatLog* StatLog;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    class UClass* PlayerControllerClass;
    class UClass* GameReplicationInfoClass;
    class UClass* StatLogClass;
    TArrayNoInit<FString> m_BankListToLoad;
    FStringNoInit m_szGameTypeFlag;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit HUDType;
    FStringNoInit MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    FStringNoInit MutatorClass;
    FStringNoInit AccessControlClass;
    FStringNoInit BroadcastHandlerClass;
    FStringNoInit PlayerControllerClassName;
    FStringNoInit m_szGameOptions;
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execSetCurrentMapNum);
    DECLARE_FUNCTION(execGetCurrentMapNum);
    DECLARE_FUNCTION(execProcessR6Availabilty);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
        Parms.Sender=Sender;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
    }
    void eventBroadcast(class AActor* Sender, const FString& Msg, FName type)
    {
        AGameInfo_eventBroadcast_Parms Parms;
        Parms.Sender=Sender;
        Parms.Msg=Msg;
        Parms.type=type;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
    }
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerController* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerController* eventLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    BITFIELD eventCanPlayOutroVideo()
    {
        AGameInfo_eventCanPlayOutroVideo_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanPlayOutroVideo),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventCanPlayIntroVideo()
    {
        AGameInfo_eventCanPlayIntroVideo_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanPlayIntroVideo),&Parms);
        return Parms.ReturnValue;
    }
    void eventPreLogOut(class APlayerController* ExitingPlayer)
    {
        AGameInfo_eventPreLogOut_Parms Parms;
        Parms.ExitingPlayer=ExitingPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogOut),&Parms);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class UClass* DefaultWeapon;
    FStringNoInit DefaultWeaponName;
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API AStaticMeshActor : public AActor
{
public:
    INT SkinsIndex;
    BITFIELD m_bWave:1 GCC_PACK(4);
    BITFIELD m_bBlockCoronas:1;
    BITFIELD m_bUseTesselletation:1;
    FLOAT m_fScale GCC_PACK(4);
    FLOAT m_fFrequency;
    FLOAT m_fNormalScale;
    FLOAT m_fMinZero;
    FLOAT m_fTesseletationLevel;
    FVector m_vScalePerAxis;
    DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};

enum ePeekingMode
{
    PEEK_none               =0,
    PEEK_full               =1,
    PEEK_fluid              =2,
    PEEK_MAX                =3,
};
enum EGrenadeType
{
    GTYPE_None              =0,
    GTYPE_Smoke             =1,
    GTYPE_TearGas           =2,
    GTYPE_FlashBang         =3,
    GTYPE_BreachingCharge   =4,
    GTYPE_MAX               =5,
};
enum eGrenadeThrow
{
    GRENADE_None            =0,
    GRENADE_Throw           =1,
    GRENADE_Roll            =2,
    GRENADE_RemovePin       =3,
    GRENADE_PeekLeft        =4,
    GRENADE_PeekRight       =5,
    GRENADE_PeekLeftThrow   =6,
    GRENADE_PeekRightThrow  =7,
    GRENADE_MAX             =8,
};
enum EAnimStateType
{
    SA_Generic              =0,
    SA_Walk                 =1,
    SA_Run                  =2,
    SA_Turn                 =3,
    SA_CrouchToProne        =4,
    SA_ProneToCrouch        =5,
    SA_ProneWalk            =6,
    SA_ProneSideWalk        =7,
    SA_StairUp              =8,
    SA_StairDown            =9,
    SA_LadderHands          =10,
    SA_LadderFoot           =11,
    SA_LameWalkSlide        =12,
    SA_Land                 =13,
    SA_DeadFall             =14,
    SA_LameWalkLegOK        =15,
    SA_MAX                  =16,
};
enum EGunSoundType
{
    GS_ExteriorStereo       =0,
    GS_InteriorStereo       =1,
    GS_ExteriorMono         =2,
    GS_InteriorMono         =3,
    GS_MAX                  =4,
};
enum ETerroristVoices
{
    TV_Wounded              =0,
    TV_Taunt                =1,
    TV_Surrender            =2,
    TV_SeesTearGas          =3,
    TV_RunAway              =4,
    TV_Grenade              =5,
    TV_CoughsSmoke          =6,
    TV_CoughsGas            =7,
    TV_Backup               =8,
    TV_SeesSurrenderedHostage=9,
    TV_SeesRainbow_LowAlert =10,
    TV_SeesRainbow_HighAlert=11,
    TV_SeesFreeHostage      =12,
    TV_HearsNoize           =13,
    TV_MAX                  =14,
};
enum EHostageVoices
{
    HV_Run                  =0,
    HV_Frozen               =1,
    HV_Foetal               =2,
    HV_Hears_Shooting       =3,
    HV_RnbFollow            =4,
    HV_RndStayPut           =5,
    HV_RnbHurt              =6,
    HV_EntersSmoke          =7,
    HV_EntersGas            =8,
    HV_ClarkReprimand       =9,
    HV_MAX                  =10,
};
enum ECommonRainbowVoices
{
    CRV_TerroristDown       =0,
    CRV_TakeWound           =1,
    CRV_GoesDown            =2,
    CRV_EntersSmoke         =3,
    CRV_EntersGas           =4,
    CRV_MAX                 =5,
};
enum ERainbowPlayerVoices
{
    RPV_TeamRegroup         =0,
    RPV_TeamMove            =1,
    RPV_TeamHold            =2,
    RPV_AllTeamsHold        =3,
    RPV_AllTeamsMove        =4,
    RPV_TeamMoveAndFrag     =5,
    RPV_TeamMoveAndGas      =6,
    RPV_TeamMoveAndSmoke    =7,
    RPV_TeamMoveAndFlash    =8,
    RPV_TeamOpenDoor        =9,
    RPV_TeamCloseDoor       =10,
    RPV_TeamOpenShudder     =11,
    RPV_TeamCloseShudder    =12,
    RPV_TeamOpenAndClear    =13,
    RPV_TeamOpenAndFrag     =14,
    RPV_TeamOpenAndGas      =15,
    RPV_TeamOpenAndSmoke    =16,
    RPV_TeamOpenAndFlash    =17,
    RPV_TeamOpenFragAndClear=18,
    RPV_TeamOpenGasAndClear =19,
    RPV_TeamOpenSmokeAndClear=20,
    RPV_TeamOpenFlashAndClear=21,
    RPV_TeamFragAndClear    =22,
    RPV_TeamGasAndClear     =23,
    RPV_TeamSmokeAndClear   =24,
    RPV_TeamFlashAndClear   =25,
    RPV_TeamUseLadder       =26,
    RPV_TeamSecureTerrorist =27,
    RPV_TeamGoGetHostage    =28,
    RPV_TeamHostageStayPut  =29,
    RPV_TeamStatusReport    =30,
    RPV_TeamUseElectronic   =31,
    RPV_TeamUseDemolition   =32,
    RPV_AlphaGoCode         =33,
    RPV_BravoGoCode         =34,
    RPV_CharlieGoCode       =35,
    RPV_ZuluGoCode          =36,
    RPV_OrderTeamWithGoCode =37,
    RPV_HostageFollow       =38,
    RPV_HostageStay         =39,
    RPV_HostageSafe         =40,
    RPV_HostageSecured      =41,
    RPV_MemberDown          =42,
    RPV_SniperFree          =43,
    RPV_SniperHold          =44,
    RPV_MAX                 =45,
};
enum ERainbowMembersVoices
{
    RMV_Contact             =0,
    RMV_ContactRear         =1,
    RMV_ContactAndEngages   =2,
    RMV_ContactRearAndEngages=3,
    RMV_TeamRegroupOnLead   =4,
    RMV_TeamReformOnLead    =5,
    RMV_TeamReceiveOrder    =6,
    RMV_TeamOrderFromLeadNil=7,
    RMV_NoMoreFrag          =8,
    RMV_NoMoreSmoke         =9,
    RMV_NoMoreGas           =10,
    RMV_NoMoreFlash         =11,
    RMV_OnLadder            =12,
    RMV_MemberDown          =13,
    RMV_AmmoOut             =14,
    RMV_FragNear            =15,
    RMV_EntersGasCloud      =16,
    RMV_TakingFire          =17,
    RMV_TeamHoldUp          =18,
    RMV_TeamMoveOut         =19,
    RMV_HostageFollow       =20,
    RMV_HostageStay         =21,
    RMV_HostageSafe         =22,
    RMV_HostageSecured      =23,
    RMV_RainbowHitRainbow   =24,
    RMV_RainbowHitHostage   =25,
    RMV_DoorReform          =26,
    RMV_MAX                 =27,
};
enum ERainbowOtherTeamVoices
{
    ROTV_SniperHasTarget    =0,
    ROTV_SniperLooseTarget  =1,
    ROTV_SniperTangoDown    =2,
    ROTV_MemberDown         =3,
    ROTV_RainbowHitRainbow  =4,
    ROTV_Objective1         =5,
    ROTV_Objective2         =6,
    ROTV_Objective3         =7,
    ROTV_Objective4         =8,
    ROTV_Objective5         =9,
    ROTV_Objective6         =10,
    ROTV_Objective7         =11,
    ROTV_Objective8         =12,
    ROTV_Objective9         =13,
    ROTV_Objective10        =14,
    ROTV_WaitAlpha          =15,
    ROTV_WaitBravo          =16,
    ROTV_WaitCharlie        =17,
    ROTV_WaitZulu           =18,
    ROTV_EntersSmoke        =19,
    ROTV_EntersGas          =20,
    ROTV_StatusEngaging     =21,
    ROTV_StatusMoving       =22,
    ROTV_StatusWaiting      =23,
    ROTV_StatusWaitAlpha    =24,
    ROTV_StatusWaitBravo    =25,
    ROTV_StatusWaitCharlie  =26,
    ROTV_StatusWaitZulu     =27,
    ROTV_StatusSniperWaitAlpha=28,
    ROTV_StatusSniperWaitBravo=29,
    ROTV_StatusSniperWaitCharlie=30,
    ROTV_StatusSniperUntilAlpha=31,
    ROTV_StatusSniperUntilBravo=32,
    ROTV_StatusSniperUntilCharlie=33,
    ROTV_MAX                =34,
};
enum EPreRecordedMsgVoices
{
    PRMV_NeedBackup         =0,
    PRMV_FollowMe           =1,
    PRMV_CoverArea          =2,
    PRMV_MoveOut            =3,
    PRMV_CoverMe            =4,
    PRMV_Retreat            =5,
    PRMV_ReformOnMe         =6,
    PRMV_Charge             =7,
    PRMV_HoldPosition       =8,
    PRMV_SecureArea         =9,
    PRMV_WaitingOrders      =10,
    PRMV_Assauting          =11,
    PRMV_Defending          =12,
    PRMV_EscortingCargo     =13,
    PRMV_ObjectiveComplete  =14,
    PRMV_ObjectiveReached   =15,
    PRMV_Covering           =16,
    PRMV_WeaponDry          =17,
    PRMV_Move               =18,
    PRMV_Roger              =19,
    PRMV_Negative           =20,
    PRMV_TakingFire         =21,
    PRMV_PinnedDown         =22,
    PRMV_TangoSpotted       =23,
    PRMV_TangoDown          =24,
    PRMV_StatusReport       =25,
    PRMV_Clear              =26,
    PRMV_MAX                =27,
};
enum EMultiCommonVoices
{
    MCV_FragThrow           =0,
    MCV_FlashThrow          =1,
    MCV_GasThrow            =2,
    MCV_SmokeThrow          =3,
    MCV_ActivatingBomb      =4,
    MCV_BombActivated       =5,
    MCV_DeactivatingBomb    =6,
    MCV_BombDeactivated     =7,
    MCV_MAX                 =8,
};
enum ERainbowTeamVoices
{
    RTV_PlacingBug          =0,
    RTV_BugActivated        =1,
    RTV_AccessingComputer   =2,
    RTV_ComputerHacked      =3,
    RTV_EscortingHostage    =4,
    RTV_HostageSecured      =5,
    RTV_PlacingExplosives   =6,
    RTV_ExplosivesReady     =7,
    RTV_DesactivatingSecurity=8,
    RTV_SecurityDeactivated =9,
    RTV_GasThreat           =10,
    RTV_GrenadeThreat       =11,
    RTV_MAX                 =12,
};
enum eHealth
{
    HEALTH_Healthy          =0,
    HEALTH_Wounded          =1,
    HEALTH_Incapacitated    =2,
    HEALTH_Dead             =3,
    HEALTH_MAX              =4,
};

struct APawn_eventPlayLandingAnimation_Parms
{
    FLOAT impactVel;
};
struct APawn_eventPlayFalling_Parms
{
};
struct APawn_eventPlayJump_Parms
{
};
struct APawn_eventChangeAnimation_Parms
{
};
struct APawn_eventStopPlayFiring_Parms
{
};
struct APawn_eventPlayDying_Parms
{
    class UClass* DamageType;
    FVector HitLoc;
};
struct APawn_eventSetAnimAction_Parms
{
    FName NewAction;
};
struct APawn_eventBreathTimer_Parms
{
};
struct APawn_eventHeadVolumeChange_Parms
{
    class APhysicsVolume* newHeadVolume;
};
struct APawn_eventEyePosition_Parms
{
    FVector ReturnValue;
};
struct APawn_eventStartCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventEndCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName type;
};
struct APawn_eventGetViewRotation_Parms
{
    FRotator ReturnValue;
};
struct APawn_eventEndClimbLadder_Parms
{
    class ALadderVolume* OldLadder;
};
struct APawn_eventSetWalking_Parms
{
    BITFIELD bNewIsWalking;
};
struct APawn_eventPlayWeaponAnimation_Parms
{
};
struct APawn_eventReceivedEngineWeapon_Parms
{
};
struct APawn_eventReceivedWeapons_Parms
{
};
struct APawn_eventStopAnimForRG_Parms
{
};
struct APawn_eventR6DeadEndedMoving_Parms
{
};
class ENGINE_API APawn : public AActor
{
public:
    BYTE FlashCount;
    BYTE Visibility;
    BYTE noiseType;
    BYTE OldPhysics;
    BYTE AnimPlayBackward[4];
    BYTE m_ePeekingMode;
    BYTE m_bIsFiringWeapon;
    BYTE m_ePawnType;
    BYTE m_eEffectiveGrenade;
    BYTE m_eGrenadeThrow;
    BYTE m_eRepGrenadeThrow;
    BYTE m_eHealth;
    INT Health;
    INT m_iIsInStairVolume;
    INT m_iNoCircleBeat;
    INT m_iTeam;
    INT m_iFriendlyTeams;
    INT m_iEnemyTeams;
    INT m_iExtentX0;
    INT m_iExtentY0;
    INT m_iExtentZ0;
    INT m_iExtentX1;
    INT m_iExtentY1;
    INT m_iExtentZ1;
    INT m_iProneTrailPtr;
    INT m_iCurrentFloor;
    BITFIELD bJustLanded:1 GCC_PACK(4);
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD m_bWantsToProne:1;
    BITFIELD m_bIsProne:1;
    BITFIELD m_bTryToUnProne:1;
    BITFIELD m_bCanProne:1;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bCountJumps:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bIgnoreForces:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bSteadyFiring:1;
    BITFIELD bCanBeBaseForPawns:1;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bIsFemale:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bAutoFire:1;
    BITFIELD bRollToDesired:1;
    BITFIELD bIgnorePlayFiring:1;
    BITFIELD m_bArmPatchSet:1;
    BITFIELD bCachedRelevant:1;
    BITFIELD bUseCompressedPosition:1;
    BITFIELD m_bDroppedWeapon:1;
    BITFIELD m_bHaveGasMask:1;
    BITFIELD m_bUseHighStance:1;
    BITFIELD m_bWantsHighStance:1;
    BITFIELD m_bTurnRight:1;
    BITFIELD m_bTurnLeft:1;
    BITFIELD bPhysicsAnimUpdate:1;
    BITFIELD bWasProne:1;
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BITFIELD m_bIsLanding:1;
    BITFIELD m_bMakesTrailsWhenProning:1;
    BITFIELD m_bPeekingLeft:1;
    BITFIELD m_bHBJammerOn:1;
    BITFIELD m_bIsDeadBody:1;
    BITFIELD m_bAnimStopedForRG:1;
    BITFIELD m_bIsPlayer:1;
    BITFIELD m_bFlashBangVisualEffectRequested:1;
    BITFIELD m_bRepFinishShotgun:1;
    FLOAT NetRelevancyTime GCC_PACK(4);
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT SkillModifier;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    FLOAT DestinationOffset;
    FLOAT NextPathRadius;
    FLOAT SerpentineDist;
    FLOAT SerpentineTime;
    FLOAT UncrouchTime;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT CrouchedPct;
    FLOAT MaxFallSpeed;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT BreathTime;
    FLOAT UnderWaterTime;
    FLOAT LastPainTime;
    FLOAT m_fProneHeight;
    FLOAT m_fProneRadius;
    FLOAT noiseTime;
    FLOAT noiseLoudness;
    FLOAT m_NextBulletImpact;
    FLOAT m_NextFireSound;
    FLOAT LastPainSound;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FLOAT CarcassCollisionHeight;
    FLOAT OldRotYaw;
    FLOAT BaseMovementRate;
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    FLOAT ForwardStrafeBias;
    FLOAT BackwardStrafeBias;
    FLOAT m_fCrouchBlendRate;
    FLOAT m_fHeartBeatTime[2];
    FLOAT m_fHeartBeatFrequency;
    FLOAT m_fBlurValue;
    FLOAT m_fDecrementalBlurValue;
    FLOAT m_fRepDecrementalBlurValue;
    FLOAT m_fRemainingGrenadeTime;
    FLOAT m_fFlashBangVisualEffectTime;
    FLOAT m_fXFlashBang;
    FLOAT m_fYFlashBang;
    FLOAT m_fDistanceFlashBang;
    FLOAT m_fLastCommunicationTime;
    FLOAT m_fPrePivotPawnInitialOffset;
    class AController* Controller;
    class APlayerController* LastRealViewer;
    class AActor* LastViewer;
    class ANavigationPoint* Anchor;
    class AR6EngineWeapon* EngineWeapon;
    class AR6EngineWeapon* PendingWeapon;
    class AR6EngineWeapon* m_WeaponsCarried[4];
    class APhysicsVolume* HeadVolume;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ALadderVolume* OnLadder;
    class UMaterial* m_HitMaterial;
    class UTexture* m_pHeartBeatTexture;
    class USound* m_sndHBSSound;
    class USound* m_sndHearToneSound;
    class USound* m_sndHearToneSoundStop;
    class UTexture* m_ArmPatchTexture;
    FName AIScriptTag;
    FName LandMovementState;
    FName WaterMovementState;
    FName AnimStatus;
    FName AnimAction;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    class UClass* ReducedDamageType;
    class UClass* BloodEffect;
    class UClass* LowDetailBlood;
    class UClass* LowGoreBlood;
    class UClass* ControllerClass;
    class UClass* HitDamageType;
    FVector SerpentineDir;
    FVector ConstantAcceleration;
    FVector Floor;
    FVector m_vLastNetLocation;
    FVector noiseSpot;
    FVector WalkBob;
    FVector TakeHitLocation;
    FVector TearOffMomentum;
    FVector OldAcceleration;
    FVector m_vEyeLocation;
    FRotator m_rRotationOffset;
    FVector m_vGrenadeLocation;
    FGuid m_ArmPatchGUID;
    FStringNoInit OwnerName;
    FStringNoInit MenuName;
    FStringNoInit m_CharacterName;
    FCompressedPosition PawnPosition;
    DECLARE_FUNCTION(execIsAlive);
    DECLARE_FUNCTION(execIsNeutral);
    DECLARE_FUNCTION(execIsEnemy);
    DECLARE_FUNCTION(execIsFriend);
    DECLARE_FUNCTION(execReachedDestination);
    void eventPlayLandingAnimation(FLOAT impactVel)
    {
        APawn_eventPlayLandingAnimation_Parms Parms;
        Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
    }
    void eventPlayFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
    }
    void eventPlayJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
    }
    void eventChangeAnimation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
    }
    void eventStopPlayFiring()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StopPlayFiring),NULL);
    }
    void eventPlayDying(class UClass* DamageType, FVector HitLoc)
    {
        APawn_eventPlayDying_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
    }
    void eventSetAnimAction(FName NewAction)
    {
        APawn_eventSetAnimAction_Parms Parms;
        Parms.NewAction=NewAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
    }
    void eventBreathTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BreathTimer),NULL);
    }
    void eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
    {
        APawn_eventHeadVolumeChange_Parms Parms;
        if(IsProbing(NAME_HeadVolumeChange)) {
        Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
        }
    }
    FVector eventEyePosition()
    {
        APawn_eventEyePosition_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_EyePosition),&Parms);
        return Parms.ReturnValue;
    }
    void eventStartCrouch(FLOAT HeightAdjust)
    {
        APawn_eventStartCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
    }
    void eventEndCrouch(FLOAT HeightAdjust)
    {
        APawn_eventEndCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
    }
    void eventClientMessage(const FString& S, FName type)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.type=type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    FRotator eventGetViewRotation()
    {
        APawn_eventGetViewRotation_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetViewRotation),&Parms);
        return Parms.ReturnValue;
    }
    void eventEndClimbLadder(class ALadderVolume* OldLadder)
    {
        APawn_eventEndClimbLadder_Parms Parms;
        Parms.OldLadder=OldLadder;
        ProcessEvent(FindFunctionChecked(ENGINE_EndClimbLadder),&Parms);
    }
    void eventSetWalking(BITFIELD bNewIsWalking)
    {
        APawn_eventSetWalking_Parms Parms;
        Parms.bNewIsWalking=bNewIsWalking;
        ProcessEvent(FindFunctionChecked(ENGINE_SetWalking),&Parms);
    }
    void eventPlayWeaponAnimation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayWeaponAnimation),NULL);
    }
    void eventReceivedEngineWeapon()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedEngineWeapon),NULL);
    }
    void eventReceivedWeapons()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedWeapons),NULL);
    }
    void eventStopAnimForRG()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StopAnimForRG),NULL);
    }
    void eventR6DeadEndedMoving()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_R6DeadEndedMoving),NULL);
    }
    DECLARE_CLASS(APawn,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APawn)
};


class ENGINE_API AVehicle : public APawn
{
public:
    INT NumParts;
    BITFIELD bActivated:1 GCC_PACK(4);
    BITFIELD bUpdating:1;
    class AVehiclePart* VehicleParts[16] GCC_PACK(4);
    class UClass* PartClass[16];
    FVector PartOffset[16];
    DECLARE_CLASS(AVehicle,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehicle)
};


class ENGINE_API AScout : public APawn
{
public:
    FLOAT MaxLandingVelocity;
    DECLARE_CLASS(AScout,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};


struct AKVehicle_eventKDriverLeave_Parms
{
};
struct AKVehicle_eventKDriverEnter_Parms
{
    class APawn* P;
};
struct AKVehicle_eventKVehicleUpdateParams_Parms
{
};
class ENGINE_API AKVehicle : public APawn
{
public:
    INT CamPosIndex;
    BITFIELD bAutoDrive:1 GCC_PACK(4);
    BITFIELD bLookSteer:1;
    FLOAT Steering GCC_PACK(4);
    FLOAT Throttle;
    FLOAT LookSteerSens;
    class APawn* Driver;
    FPlane CamPos[4];
    FVector ExitPos;
    FRotator ExitRot;
    FVector DrivePos;
    FRotator DriveRot;
    DECLARE_FUNCTION(execGraphData);
    void eventKDriverLeave()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KDriverLeave),NULL);
    }
    void eventKDriverEnter(class APawn* P)
    {
        AKVehicle_eventKDriverEnter_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_KDriverEnter),&Parms);
    }
    void eventKVehicleUpdateParams()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVehicleUpdateParams),NULL);
    }
    DECLARE_CLASS(AKVehicle,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKVehicle)
};


class ENGINE_API AEmitter : public AActor
{
public:
    BITFIELD AutoDestroy:1 GCC_PACK(4);
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    TArrayNoInit<class UParticleEmitter*> Emitters GCC_PACK(4);
    FRangeVector GlobalOffsetRange;
    FRange TimeTillResetRange;
    INT Initialized;
    BITFIELD ActorForcesEnabled:1 GCC_PACK(4);
    BITFIELD UseParticleProjectors:1;
    BITFIELD DeleteParticleEmitters:1;
    FLOAT EmitterRadius GCC_PACK(4);
    FLOAT EmitterHeight;
    FLOAT TimeTillReset;
    class UParticleMaterial* ParticleMaterial;
    FBox BoundingBox;
    FVector GlobalOffset;
    DECLARE_FUNCTION(execKill);
    DECLARE_CLASS(AEmitter,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEmitter)
};

enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

struct AMover_eventKeyFrameReached_Parms
{
};
class ENGINE_API AMover : public AActor
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    INT EncroachDamage;
    INT numTriggerEvents;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    INT ClientUpdate;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bOpening:1;
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bAutoDoor:1;
    BITFIELD bNoAIRelevance:1;
    FLOAT MoveTime GCC_PACK(4);
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    FLOAT DamageThreshold;
    FLOAT DelayTime;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class AActor* SavedTrigger;
    class AMover* Leader;
    class AMover* Follower;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    class ANavigationPoint* myMarker;
    FName PlayerBumpEvent;
    FName BumpEvent;
    FName ReturnGroup;
    FVector KeyPos[8];
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FVector SimOldPos;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    void eventKeyFrameReached()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
    }
    DECLARE_CLASS(AMover,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMover)
};


class ENGINE_API AFluidSurfaceOscillator : public AActor
{
public:
    BYTE Phase;
    FLOAT Frequency;
    FLOAT Strength;
    FLOAT Radius;
    class AFluidSurfaceInfo* FluidInfo;
    FLOAT OscTime;
    DECLARE_CLASS(AFluidSurfaceOscillator,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AFluidSurfaceOscillator)
};


struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
    class APawn* Other;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    class UReachSpec* Path;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    INT visitedWeight;
    INT bestPathWeight;
    INT cost;
    INT ExtraCost;
    BITFIELD taken:1 GCC_PACK(4);
    BITFIELD bBlocked:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAlwaysUseStrafing:1;
    BITFIELD bForceNoStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bDestinationOnly:1;
    BITFIELD bSourceOnly:1;
    BITFIELD bSpecialForced:1;
    BITFIELD bMustBeReachable:1;
    BITFIELD m_bExactMove:1;
    class ANavigationPoint* nextNavigationPoint GCC_PACK(4);
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    TArrayNoInit<class UReachSpec*> PathList;
    BITFIELD bEndPoint:1 GCC_PACK(4);
    BITFIELD eventSuggestMovePreparation(class APawn* Other)
    {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker, class UReachSpec* Path)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Seeker=Seeker;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API AJumpDest : public ANavigationPoint
{
public:
    INT NumUpstreamPaths;
    class UReachSpec* UpstreamPaths[8];
    FVector NeededJump[8];
    DECLARE_CLASS(AJumpDest,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AJumpDest)
};


class ENGINE_API AJumpPad : public ANavigationPoint
{
public:
    class AActor* JumpTarget;
    FVector JumpVelocity;
    FVector JumpModifier;
    DECLARE_CLASS(AJumpPad,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AJumpPad)
};


class ENGINE_API ADoor : public ANavigationPoint
{
public:
    BITFIELD bInitiallyClosed:1 GCC_PACK(4);
    BITFIELD bBlockedWhenClosed:1;
    BITFIELD bDoorOpen:1;
    BITFIELD bTempNoCollide:1;
    class AMover* MyDoor GCC_PACK(4);
    class AActor* RecommendedTrigger;
    FName DoorTag;
    FName DoorTrigger;
    DECLARE_CLASS(ADoor,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADoor)
};


class ENGINE_API AAutoDoor : public ADoor
{
public:
    DECLARE_CLASS(AAutoDoor,ADoor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoDoor)
};


class ENGINE_API ASmallNavigationPoint : public ANavigationPoint
{
public:
    DECLARE_CLASS(ASmallNavigationPoint,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASmallNavigationPoint)
};


class ENGINE_API ALadder : public ASmallNavigationPoint
{
public:
    class ALadderVolume* MyLadder;
    class ALadder* LadderList;
    DECLARE_CLASS(ALadder,ASmallNavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALadder)
};


class ENGINE_API AAutoLadder : public ALadder
{
public:
    DECLARE_CLASS(AAutoLadder,ALadder,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoLadder)
};


class ENGINE_API AWarpZoneMarker : public ASmallNavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ASmallNavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AAIMarker : public ASmallNavigationPoint
{
public:
    class AAIScript* markedScript;
    DECLARE_CLASS(AAIMarker,ASmallNavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIMarker)
};


class ENGINE_API APlayerStart : public ASmallNavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    DECLARE_CLASS(APlayerStart,ASmallNavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ASmallNavigationPoint
{
public:
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FLOAT LastFired GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FName ProductRequired;
    FVector TargetVelocity;
    FStringNoInit URL;
    DECLARE_CLASS(ATeleporter,ASmallNavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
    class AMover* MyLift;
    FName LiftTag;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FLOAT MaxDist2D;
    class AMover* MyLift;
    class ATrigger* RecommendedTrigger;
    FName LiftTag;
    FName LiftTrigger;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


class ENGINE_API AAntiPortalActor : public AActor
{
public:
    DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    class UObject* UnusedLightMesh GCC_PACK(4);
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABrush)
};


class ENGINE_API AVolume : public ABrush
{
public:
    INT LocationPriority;
    class AActor* AssociatedActor;
    class ADecorationList* DecoList;
    FName AssociatedActorTag;
    FStringNoInit LocationName;
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVolume)
};


class ENGINE_API ABlockingVolume : public AVolume
{
public:
    DECLARE_CLASS(ABlockingVolume,AVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABlockingVolume)
};


struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    INT Priority;
    BITFIELD bPainCausing:1 GCC_PACK(4);
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    BITFIELD bDistanceFog:1;
    FLOAT GroundFriction GCC_PACK(4);
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    FLOAT FluidFriction;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    class USound* EntrySound;
    class USound* ExitSound;
    class AInfo* PainTimer;
    class APhysicsVolume* NextPhysicsVolume;
    class UClass* DamageType;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FVector ZoneVelocity;
    FVector Gravity;
    FVector ViewFlash;
    FVector ViewFog;
    FColor DistanceFogColor;
    void eventPawnLeavingVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
    }
    void eventPawnEnteredVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
    }
    void eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
    }
    void eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
    }
    void eventPhysicsChangedFor(class AActor* Other)
    {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APhysicsVolume)
};


class ENGINE_API ALadderVolume : public APhysicsVolume
{
public:
    BITFIELD bNoPhysicalLadder:1 GCC_PACK(4);
    BITFIELD bAutoPath:1;
    class ALadder* LadderList GCC_PACK(4);
    class APawn* PendingClimber;
    FName ClimbingAnimation;
    FName TopAnimation;
    FRotator WallDir;
    FVector LookDir;
    FVector ClimbDir;
    DECLARE_CLASS(ALadderVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALadderVolume)
};


class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};


struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
    class APlayerController* P;
};
class ENGINE_API ALineOfSightTrigger : public ATriggers
{
public:
    INT MaxViewAngle;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bTriggered:1;
    FLOAT MaxViewDist GCC_PACK(4);
    FLOAT OldTickTime;
    FLOAT RequiredViewDir;
    class AActor* SeenActor;
    FName SeenActorTag;
    void eventPlayerSeesMe(class APlayerController* P)
    {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
    }
    DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALineOfSightTrigger)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_HumanPlayerProximity =5,
    TT_MAX                  =6,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    BITFIELD bSavedInitialCollision:1;
    BITFIELD bSavedInitialActive:1;
    BITFIELD m_bAlarm:1;
    FLOAT RepeatTriggerTime GCC_PACK(4);
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class AR6Alarm* m_pAlarm;
    class UClass* ClassProximityType;
    FStringNoInit Message;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

#define UCONST_DAMAGE_None 0
#define UCONST_DAMAGE_Light 1
#define UCONST_DAMAGE_Medium 2
#define UCONST_DAMAGE_Heavy 4
#define UCONST_DAMAGE_Fatal 8
#define UCONST_DAMAGE_Explosive 16
#define UCONST_DAMAGE_Energy 32
#define UCONST_DAMAGE_ArmorKiller 64

class ENGINE_API ADamageType : public AActor
{
public:
    INT DamageDesc;
    INT DamageThreshold;
    BITFIELD bArmorStops:1 GCC_PACK(4);
    BITFIELD bInstantHit:1;
    BITFIELD bFastInstantHit:1;
    FLOAT ViewFlash GCC_PACK(4);
    FLOAT GibModifier;
    FLOAT FlashScale;
    class UClass* DamageEffect;
    class UClass* PawnDamageEffect;
    class UClass* PawnDamageEmitter;
    class UClass* LowGoreDamageEffect;
    class UClass* LowGoreDamageEmitter;
    class UClass* LowDetailEffect;
    class UClass* LowDetailEmitter;
    TArrayNoInit<class USound*> PawnDamageSounds;
    TArrayNoInit<class USound*> LowGoreDamageSounds;
    FVector ViewFog;
    FVector FlashFog;
    FVector DamageKick;
    FStringNoInit DeathString;
    FStringNoInit FemaleSuicide;
    FStringNoInit MaleSuicide;
    FStringNoInit DamageWeaponName;
    DECLARE_CLASS(ADamageType,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};


class ENGINE_API AVehiclePart : public AActor
{
public:
    BITFIELD bUpdating:1 GCC_PACK(4);
    DECLARE_CLASS(AVehiclePart,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehiclePart)
};

enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};
enum EMoveToResult
{
    eMoveTo_none            =0,
    eMoveTo_success         =1,
    eMoveTo_failed          =2,
    eMoveTo_MAX             =3,
};
enum ERainbowTeamVoices
{
    RTV_PlacingBug          =0,
    RTV_BugActivated        =1,
    RTV_AccessingComputer   =2,
    RTV_ComputerHacked      =3,
    RTV_EscortingHostage    =4,
    RTV_HostageSecured      =5,
    RTV_PlacingExplosives   =6,
    RTV_ExplosivesReady     =7,
    RTV_DesactivatingSecurity=8,
    RTV_SecurityDeactivated =9,
    RTV_GasThreat           =10,
    RTV_GrenadeThreat       =11,
    RTV_MAX                 =12,
};
enum EGrenadeType
{
    GTYPE_None              =0,
    GTYPE_Smoke             =1,
    GTYPE_TearGas           =2,
    GTYPE_FlashBang         =3,
    GTYPE_BreachingCharge   =4,
    GTYPE_MAX               =5,
};
#define UCONST_LATENT_MOVETOWARD 503

struct AController_eventMonitoredPawnAlert_Parms
{
};
struct AController_eventEnemyNotVisible_Parms
{
};
struct AController_eventSeeMonster_Parms
{
    class APawn* seen;
};
struct AController_eventSeePlayer_Parms
{
    class APawn* seen;
};
struct AController_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
    BYTE eType;
};
struct AController_eventPrepareForMove_Parms
{
    class ANavigationPoint* Goal;
    class UReachSpec* Path;
};
struct AController_eventNotifyHitMover_Parms
{
    FVector HitNormal;
    class AMover* Wall;
};
struct AController_eventNotifyBump_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyLanded_Parms
{
    FVector HitNormal;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHeadVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventLongFall_Parms
{
};
struct AController_eventAIHearSound_Parms
{
    class AActor* Actor;
    INT ID;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct AController_eventMayFall_Parms
{
};
class ENGINE_API AController : public AActor
{
public:
    BYTE AttitudeToPlayer;
    BYTE bRun;
    BYTE bFire;
    BYTE bAltFire;
    BYTE m_bMoveUp;
    BYTE m_bMoveDown;
    BYTE m_bMoveLeft;
    BYTE m_bMoveRight;
    BYTE m_bRotateCW;
    BYTE m_bRotateCCW;
    BYTE m_bZoomIn;
    BYTE m_bZoomOut;
    BYTE m_bAngleUp;
    BYTE m_bAngleDown;
    BYTE m_bLevelUp;
    BYTE m_bLevelDown;
    BYTE m_bGoLevelUp;
    BYTE m_bGoLevelDown;
    BYTE bDuck;
    BYTE m_eMoveToResult;
    BITFIELD bIsPlayer:1 GCC_PACK(4);
    BITFIELD bGodMode:1;
    BITFIELD bLOSflag:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bAdjusting:1;
    BITFIELD bPreparingMove:1;
    BITFIELD bControlAnimations:1;
    BITFIELD bEnemyInfoValid:1;
    BITFIELD m_bCrawl:1;
    BITFIELD m_bLockWeaponActions:1;
    BITFIELD m_bHideReticule:1;
    FLOAT SightCounter GCC_PACK(4);
    FLOAT FovAngle;
    FLOAT Handedness;
    FLOAT Stimulus;
    FLOAT MoveTimer;
    FLOAT MinHitWall;
    FLOAT LastSeenTime;
    FLOAT OldMessageTime;
    FLOAT RouteDist;
    FLOAT GroundPitchTime;
    FLOAT MonitorMaxDistSq;
    class APawn* Pawn;
    class AController* nextController;
    class AActor* MoveTarget;
    class AActor* Focus;
    class AMover* PendingMover;
    class AActor* GoalList[4];
    class ANavigationPoint* home;
    class APawn* Enemy;
    class AActor* Target;
    class AActor* RouteCache[16];
    class UReachSpec* CurrentPath;
    class AActor* RouteGoal;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ANavigationPoint* StartSpot;
    class AR6PawnReplicationInfo* m_PawnRepInfo;
    class APawn* MonitoredPawn;
    FName NextState;
    FName NextLabel;
    class UClass* PlayerReplicationInfoClass;
    class UClass* PawnClass;
    class UClass* PreviousPawnClass;
    FVector AdjustLoc;
    FVector Destination;
    FVector FocalPoint;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FVector ViewX;
    FVector ViewY;
    FVector ViewZ;
    FVector MonitorStartLoc;
    FStringNoInit VoiceType;
    DECLARE_FUNCTION(execEndClimbLadder);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execInLatentExecution);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemoveController);
    DECLARE_FUNCTION(execAddController);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathTowardNearest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execFinishRotation);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventMonitoredPawnAlert()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MonitoredPawnAlert),NULL);
    }
    void eventEnemyNotVisible()
    {
        if(IsProbing(NAME_EnemyNotVisible)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
        }
    }
    void eventSeeMonster(class APawn* seen)
    {
        AController_eventSeeMonster_Parms Parms;
        if(IsProbing(NAME_SeeMonster)) {
        Parms.seen=seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
        }
    }
    void eventSeePlayer(class APawn* seen)
    {
        AController_eventSeePlayer_Parms Parms;
        if(IsProbing(NAME_SeePlayer)) {
        Parms.seen=seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
        }
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker, BYTE eType)
    {
        AController_eventHearNoise_Parms Parms;
        if(IsProbing(NAME_HearNoise)) {
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        Parms.eType=eType;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
        }
    }
    void eventPrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
    {
        AController_eventPrepareForMove_Parms Parms;
        Parms.Goal=Goal;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForMove),&Parms);
    }
    void eventNotifyHitMover(FVector HitNormal, class AMover* Wall)
    {
        AController_eventNotifyHitMover_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
    }
    BITFIELD eventNotifyBump(class AActor* Other)
    {
        AController_eventNotifyBump_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyBump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHitWall(FVector HitNormal, class AActor* Wall)
    {
        AController_eventNotifyHitWall_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyLanded(FVector HitNormal)
    {
        AController_eventNotifyLanded_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyLanded)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHeadVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventAIHearSound(class AActor* Actor, INT ID, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
    {
        AController_eventAIHearSound_Parms Parms;
        if(IsProbing(NAME_AIHearSound)) {
        Parms.Actor=Actor;
        Parms.ID=ID;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
        }
    }
    void eventMayFall()
    {
        if(IsProbing(NAME_MayFall)) {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
        }
    }
    DECLARE_CLASS(AController,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AController)
};

enum ECDKEY_VALID_REQ
{
    ECDKEY_NONE             =0,
    ECDKEY_FIRSTPASS        =1,
    ECDKEY_WAITING_FOR_RESPONSE=2,
    ECDKEY_NOT_VALID        =3,
    ECDKEY_VALID            =4,
    ECDKEY_TIMEOUT          =5,
    ECDKEY_MAX              =6,
};
enum ECDKEYST_STATUS
{
    ECDKEYST_PLAYER_UNKNOWN =0,
    ECDKEYST_PLAYER_INVALID =1,
    ECDKEYST_PLAYER_VALID   =2,
    ECDKEYST_PLAYER_BANNED  =3,
    ECDKEYST_MAX            =4,
};
enum eCameraMode
{
    CAMERA_FirstPerson      =0,
    CAMERA_3rdPersonFixed   =1,
    CAMERA_3rdPersonFree    =2,
    CAMERA_Ghost            =3,
    CAMERA_MAX              =4,
};
enum ePlayerTeamSelection
{
    PTS_UnSelected          =0,
    PTS_AutoSelect          =1,
    PTS_Alpha               =2,
    PTS_Bravo               =3,
    PTS_Spectator           =4,
    PTS_MAX                 =5,
};
#define UCONST_K_GlobalID_size 16

struct APlayerController_eventClientPBKickedOutMessage_Parms
{
    FString PBMessage;
};
struct APlayerController_eventToggleRadar_Parms
{
    BITFIELD _bRadar;
};
struct APlayerController_eventClientSetNewViewTarget_Parms
{
};
struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventRemoveCameraEffect_Parms
{
    class UCameraEffect* ExEffect;
};
struct APlayerController_eventAddCameraEffect_Parms
{
    class UCameraEffect* NewEffect;
    BITFIELD RemoveExisting;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetProgressTime_Parms
{
    FLOAT t;
};
struct APlayerController_eventSetProgressMessage_Parms
{
    INT Index;
    FString S;
    FColor C;
};
struct APlayerController_eventPreClientTravel_Parms
{
};
struct APlayerController_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName type;
};
struct APlayerController_eventClientMessage_Parms
{
    FString S;
    FName type;
};
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventInitMultiPlayerOptions_Parms
{
};
struct APlayerController_eventClientHearSound_Parms
{
    class AActor* Actor;
    class USound* S;
    BYTE ID;
};
struct APlayerController_eventSetMatchResult_Parms
{
    FString _UserUbiID;
    INT iField;
    INT iValue;
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerController : public AController
{
public:
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bXAxis;
    BYTE bYAxis;
    BYTE DoubleClickDir;
    BYTE Transition;
    BYTE m_TeamSelection;
    BYTE m_eCDKeyRequest;
    BYTE m_eCDKeyStatus;
    BYTE m_eCameraMode;
    INT ShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    INT WeaponUpdate;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    INT DemoViewPitch;
    INT DemoViewYaw;
    INT m_iChangeNameLastTime;
    INT m_iCDKeyReqID;
    INT iPBEnabled;
    BITFIELD bLookUpStairs:1 GCC_PACK(4);
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bZooming:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD m_bReadyToEnterSpectatorMode:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bCameraPositionLocked:1;
    BITFIELD ReceivedSecretChecksum:1;
    BITFIELD m_bInitFirstTick:1;
    BITFIELD m_PreLogOut:1;
    BITFIELD m_bRadarActive:1;
    BITFIELD m_bHeatVisionActive:1;
    BITFIELD m_bLoadSoundGun:1;
    BITFIELD m_bCDKeyValSecondTry:1;
    BITFIELD m_bInstructionTouch:1;
    FLOAT AimingHelp GCC_PACK(4);
    FLOAT WaitDelay;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT OrthoZoom;
    FLOAT CameraDist;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FLOAT TargetEyeHeight;
    FLOAT LastPlaySound;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FLOAT ProgressTimeOut;
    FLOAT MaxShakeRoll;
    FLOAT ShakeRollRate;
    FLOAT ShakeRollTime;
    FLOAT NetClientMaxTickRate;
    FLOAT m_fNextUpdateTime;
    FLOAT m_fLoginTime;
    class UPlayer* Player;
    class AActor* ViewTarget;
    class AHUD* myHUD;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    class AGameReplicationInfo* GameReplicationInfo;
    class APawn* TurnTarget;
    class UCheatManager* CheatManager;
    class AR6RainbowStartInfo* m_PlayerStartInfo;
    class AActor* m_SaveOldClientBase;
    class UClass* LocalMessageClass;
    class UClass* CheatClass;
    class UClass* InputClass;
    FVector FlashScale;
    FVector FlashFog;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FRotator TargetViewRotation;
    FVector TargetWeaponViewOffset;
    FColor ProgressColor[4];
    FVector MaxShakeOffset;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FVector ShakeOffsetTime;
    FRotator TurnRot180;
    FVector OldFloor;
    FPlayerPrefInfo m_PlayerPrefs;
    FStringNoInit Song;
    FStringNoInit ProgressMessage[4];
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit ngWorldSecret;
    FStringNoInit m_szGlobalID;
    FStringNoInit m_szIpAddr;
    FStringNoInit m_szAuthorizationID;
    FStringNoInit m_szOptAuthorizationID;
    class UPlayerInput* PlayerInput;
    TArrayNoInit<class UCameraEffect*> CameraEffects;
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execPB_CanPlayerSpawn);
    DECLARE_FUNCTION(execChangeVolumeTypeLinear);
    DECLARE_FUNCTION(execSetSoundOptions);
    DECLARE_FUNCTION(execSetKey);
    DECLARE_FUNCTION(execChangeInputSet);
    DECLARE_FUNCTION(execGetEnumName);
    DECLARE_FUNCTION(execGetActionKey);
    DECLARE_FUNCTION(execGetKey);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execSetViewTarget);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execSpecialDestroy);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execIsPBEnabled);
    DECLARE_FUNCTION(execGetPBConnectStatus);
    void eventClientPBKickedOutMessage(const FString& PBMessage)
    {
        APlayerController_eventClientPBKickedOutMessage_Parms Parms;
        Parms.PBMessage=PBMessage;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientPBKickedOutMessage),&Parms);
    }
    void eventToggleRadar(BITFIELD _bRadar)
    {
        APlayerController_eventToggleRadar_Parms Parms;
        Parms._bRadar=_bRadar;
        ProcessEvent(FindFunctionChecked(ENGINE_ToggleRadar),&Parms);
    }
    void eventClientSetNewViewTarget()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientSetNewViewTarget),NULL);
    }
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerController_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventRemoveCameraEffect(class UCameraEffect* ExEffect)
    {
        APlayerController_eventRemoveCameraEffect_Parms Parms;
        Parms.ExEffect=ExEffect;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveCameraEffect),&Parms);
    }
    void eventAddCameraEffect(class UCameraEffect* NewEffect, BITFIELD RemoveExisting)
    {
        APlayerController_eventAddCameraEffect_Parms Parms;
        Parms.NewEffect=NewEffect;
        Parms.RemoveExisting=RemoveExisting;
        ProcessEvent(FindFunctionChecked(ENGINE_AddCameraEffect),&Parms);
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerController_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    void eventSetProgressTime(FLOAT t)
    {
        APlayerController_eventSetProgressTime_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
    }
    void eventSetProgressMessage(INT Index, const FString& S, FColor C)
    {
        APlayerController_eventSetProgressMessage_Parms Parms;
        Parms.Index=Index;
        Parms.S=S;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName type)
    {
        APlayerController_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.type=type;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName type)
    {
        APlayerController_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.type=type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventInitInputSystem()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
    }
    void eventInitMultiPlayerOptions()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitMultiPlayerOptions),NULL);
    }
    void eventClientHearSound(class AActor* Actor, class USound* S, BYTE ID)
    {
        APlayerController_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.S=S;
        Parms.ID=ID;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventSetMatchResult(const FString& _UserUbiID, INT iField, INT iValue)
    {
        APlayerController_eventSetMatchResult_Parms Parms;
        Parms._UserUbiID=_UserUbiID;
        Parms.iField=iField;
        Parms.iValue=iValue;
        ProcessEvent(FindFunctionChecked(ENGINE_SetMatchResult),&Parms);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerController_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerController,AController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerController)
};


class ENGINE_API ACamera : public APlayerController
{
public:
    DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACamera)
};


class ENGINE_API AAIController : public AController
{
public:
    BITFIELD bHunting:1 GCC_PACK(4);
    BITFIELD bAdjustFromWalls:1;
    FLOAT Skill GCC_PACK(4);
    class AAIScript* MyScript;
    DECLARE_FUNCTION(execWaitToSeeEnemy);
    DECLARE_CLASS(AAIController,AController,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIController)
};


class ENGINE_API AR6PawnReplicationInfo : public AActor
{
public:
    BYTE m_PawnType;
    BITFIELD m_bSex:1 GCC_PACK(4);
    BITFIELD m_bDoNotPlayFullAutoSound:1;
    class AController* m_ControllerOwner GCC_PACK(4);
    class USound* m_TriggerSnd[4];
    class USound* m_SingleFireStereoSnd[4];
    class USound* m_SingleFireEndStereoSnd[4];
    class USound* m_BurstFireStereoSnd[4];
    class USound* m_FullAutoStereoSnd[4];
    class USound* m_FullAutoEndStereoSnd[4];
    class USound* m_EmptyMagSnd[4];
    class USound* m_ReloadEmptySnd[4];
    class USound* m_ReloadSnd[4];
    class USound* m_ShellSingleFireSnd[4];
    class USound* m_ShellBurstFireSnd[4];
    class USound* m_ShellFullAutoSnd[4];
    class USound* m_ShellEndFullAutoSnd[4];
    DECLARE_CLASS(AR6PawnReplicationInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6PawnReplicationInfo)
};

#define UCONST_c_iTextMessagesMax 6
#define UCONST_c_iTextKillMessagesMax 4
#define UCONST_c_iTextServerMessagesMax 3

struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPostFadeRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventRenderFirstPersonGun_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
struct AHUD_eventShowUpgradeMenu_Parms
{
};
class ENGINE_API AHUD : public AActor
{
public:
    BITFIELD bShowScores:1 GCC_PACK(4);
    BITFIELD bShowDebugInfo:1;
    BITFIELD bHideCenterMessages:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bHideHUD:1;
    FLOAT MessageLife[6] GCC_PACK(4);
    FLOAT MessageKillLife[4];
    FLOAT MessageServerLife[3];
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    class UR6GameColors* Colors;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    class UFont* m_FontRainbow6_14pt;
    class UFont* m_FontRainbow6_17pt;
    class UFont* m_FontRainbow6_22pt;
    class UFont* m_FontRainbow6_36pt;
    class UMaterial* m_ConsoleBackground;
    FColor m_ChatMessagesColor;
    FColor m_KillMessagesColor;
    FColor m_ServerMessagesColor;
    FStringNoInit HUDConfigWindowType;
    FStringNoInit LoadingMessage;
    FStringNoInit SavingMessage;
    FStringNoInit ConnectingMessage;
    FStringNoInit PausedMessage;
    FStringNoInit PrecachingMessage;
    FStringNoInit TextMessages[6];
    FStringNoInit TextKillMessages[4];
    FStringNoInit TextServerMessages[3];
    DECLARE_FUNCTION(execDraw3DLine);
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPostFadeRender(class UCanvas* Canvas)
    {
        AHUD_eventPostFadeRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostFadeRender),&Parms);
    }
    void eventRenderFirstPersonGun(class UCanvas* Canvas)
    {
        AHUD_eventRenderFirstPersonGun_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderFirstPersonGun),&Parms);
    }
    void eventWorldSpaceOverlays()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    DECLARE_CLASS(AHUD,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT TossZ;
    FLOAT Damage;
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    FLOAT ExploWallOut;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* MyDamageType;
    class UClass* ExplosionDecal;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API ADecoration : public AActor
{
public:
    INT numLandings;
    INT NumFrags;
    INT Health;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    FLOAT SplashTime GCC_PACK(4);
    class USound* PushSound;
    class USound* EndPushSound;
    class UTexture* FragSkin;
    class UClass* EffectWhenDestroyed;
    class UClass* FragType;
    FVector FragMomentum;
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API AR6ActionSpot : public AActor
{
public:
    BYTE m_eCover;
    BYTE m_eFire;
    INT m_iLastInvestigateID;
    BITFIELD m_bValidTarget:1 GCC_PACK(4);
    BITFIELD m_bInvestigate:1;
    class ANavigationPoint* m_Anchor GCC_PACK(4);
    class APawn* m_pCurrentUser;
    class AR6ActionSpot* m_NextSpot;
    DECLARE_CLASS(AR6ActionSpot,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6ActionSpot)
};


class ENGINE_API AR6FootStep : public AActor
{
public:
    FLOAT m_fDuration;
    FLOAT m_fDurationDirty;
    FLOAT m_fDirtyTime;
    FLOAT m_fFootStepDuration;
    FLOAT m_fFootStepCurrentTime;
    class UTexture* m_DecalLeftFootTexture;
    class UTexture* m_DecalRightFootTexture;
    class UTexture* m_DecalLeftFootTextureDirty;
    class UTexture* m_DecalRightFootTextureDirty;
    class UTexture* m_DecalFootTexture;
    DECLARE_CLASS(AR6FootStep,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6FootStep)
};


class ENGINE_API AR6ActionPointAbstract : public AActor
{
public:
    class AR6ActionPointAbstract* prevActionPoint;
    TArrayNoInit<class AActor*> m_PathToNextPoint;
    DECLARE_CLASS(AR6ActionPointAbstract,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6ActionPointAbstract)
};


class ENGINE_API AR6RainbowStartInfo : public AActor
{
public:
    INT m_iHealth;
    INT m_iOperativeID;
    BITFIELD m_bIsMale:1 GCC_PACK(4);
    FLOAT m_fSkillAssault GCC_PACK(4);
    FLOAT m_fSkillDemolitions;
    FLOAT m_fSkillElectronics;
    FLOAT m_fSkillSniper;
    FLOAT m_fSkillStealth;
    FLOAT m_fSkillSelfControl;
    FLOAT m_fSkillLeadership;
    FLOAT m_fSkillObservation;
    class UMaterial* m_FaceTexture;
    FPlane m_FaceCoords;
    FStringNoInit m_CharacterName;
    FStringNoInit m_ArmorName;
    FStringNoInit m_szSpecialityID;
    FStringNoInit m_WeaponName[2];
    FStringNoInit m_BulletType[2];
    FStringNoInit m_WeaponGadgetName[2];
    FStringNoInit m_GadgetName[2];
    DECLARE_CLASS(AR6RainbowStartInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6RainbowStartInfo)
};


class ENGINE_API AR6TeamStartInfo : public AActor
{
public:
    INT m_iNumberOfMembers;
    INT m_iSpawningPointNumber;
    class AR6RainbowStartInfo* m_CharacterInTeam[4];
    class UR6AbstractPlanningInfo* m_pPlanning;
    DECLARE_CLASS(AR6TeamStartInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6TeamStartInfo)
};


class ENGINE_API AR6StartGameInfo : public AActor
{
public:
    INT m_DifficultyLevel;
    INT m_CurrentMenu;
    INT m_iNbTerro;
    INT m_iTeamStart;
    BITFIELD m_SkipPlanningPhase:1 GCC_PACK(4);
    BITFIELD m_ReloadPlanning:1;
    BITFIELD m_ReloadActionPointOnly:1;
    BITFIELD m_bIsPlaying:1;
    class UObject* m_CurrentMission GCC_PACK(4);
    class AR6TeamStartInfo* m_TeamInfo[3];
    FStringNoInit m_MapName;
    FStringNoInit m_GameMode;
    DECLARE_CLASS(AR6StartGameInfo,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6StartGameInfo)
};


class ENGINE_API AR6AbstractClimbableObj : public AActor
{
public:
    DECLARE_CLASS(AR6AbstractClimbableObj,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6AbstractClimbableObj)
};


class ENGINE_API AR6ColBox : public AActor
{
public:
    BITFIELD m_bActive:1 GCC_PACK(4);
    BITFIELD m_bCheckForEdges:1;
    BITFIELD m_bCanStepUp:1;
    BITFIELD m_bCollisionDetected:1;
    FLOAT m_fFeetColBoxRadius GCC_PACK(4);
    DECLARE_FUNCTION(execEnableCollision);
    DECLARE_CLASS(AR6ColBox,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6ColBox)
};


class ENGINE_API AR6EngineFirstPersonWeapon : public AActor
{
public:
    DECLARE_CLASS(AR6EngineFirstPersonWeapon,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6EngineFirstPersonWeapon)
};

enum eWeaponType
{
    WT_Pistol               =0,
    WT_Sub                  =1,
    WT_Assault              =2,
    WT_ShotGun              =3,
    WT_Sniper               =4,
    WT_LMG                  =5,
    WT_Grenade              =6,
    WT_Gadget               =7,
    WT_MAX                  =8,
};
enum eGripType
{
    GRIP_None               =0,
    GRIP_Aug                =1,
    GRIP_BullPup            =2,
    GRIP_LMG                =3,
    GRIP_P90                =4,
    GRIP_ShotGun            =5,
    GRIP_Uzi                =6,
    GRIP_SubGun             =7,
    GRIP_HandGun            =8,
    GRIP_MAX                =9,
};
enum eWeaponGrenadeType
{
    GT_GrenadeNone          =0,
    GT_GrenadeFrag          =1,
    GT_GrenadeGas           =2,
    GT_GrenadeFlash         =3,
    GT_GrenadeSmoke         =4,
    GT_MAX                  =5,
};
enum eRateOfFire
{
    ROF_Single              =0,
    ROF_ThreeRound          =1,
    ROF_FullAuto            =2,
    ROF_MAX                 =3,
};
enum eGadgetType
{
    GAD_Other               =0,
    GAD_SniperRifleScope    =1,
    GAD_Magazine            =2,
    GAD_Bipod               =3,
    GAD_Muzzle              =4,
    GAD_Silencer            =5,
    GAD_Light               =6,
    GAD_MAX                 =7,
};
enum EWeaponSound
{
    WSOUND_None             =0,
    WSOUND_Initialize       =1,
    WSOUND_PlayTrigger      =2,
    WSOUND_PlayFireSingleShot=3,
    WSOUND_PlayFireEndSingleShot=4,
    WSOUND_PlayFireThreeBurst=5,
    WSOUND_PlayFireFullAuto =6,
    WSOUND_PlayEmptyMag     =7,
    WSOUND_PlayReloadEmpty  =8,
    WSOUND_PlayReload       =9,
    WSOUND_StopFireFullAuto =10,
    WSOUND_MAX              =11,
};

struct AR6EngineWeapon_eventShowWeaponParticules_Parms
{
    BYTE EWeaponSound;
};
struct AR6EngineWeapon_eventUpdateWeaponAttachment_Parms
{
};
struct AR6EngineWeapon_eventIsGoggles_Parms
{
    BITFIELD ReturnValue;
};
struct AR6EngineWeapon_eventSetIdentifyTarget_Parms
{
    BITFIELD bIdentifyCharacter;
    BITFIELD bFriendly;
    FString characterName;
};
struct AR6EngineWeapon_eventPawnStoppedMoving_Parms
{
};
struct AR6EngineWeapon_eventPawnIsMoving_Parms
{
};
struct AR6EngineWeapon_eventDeployWeaponBipod_Parms
{
    BITFIELD bBipodOpen;
};
class ENGINE_API AR6EngineWeapon : public AActor
{
public:
    BYTE m_eWeaponType;
    BYTE m_eGripType;
    BYTE m_iNbBulletsInWeapon;
    INT m_iNbParticlesToCreate;
    INT m_InventoryGroup;
    BITFIELD m_bBipod:1 GCC_PACK(4);
    BITFIELD m_bDeployBipod:1;
    BITFIELD m_bBipodDeployed:1;
    BITFIELD bFiredABullet:1;
    BITFIELD m_bPawnIsWalking:1;
    BITFIELD m_bIsSilenced:1;
    BITFIELD m_bUnlimitedClip:1;
    BITFIELD m_bUseMicroAnim:1;
    FLOAT m_fTimeDisplayParticule GCC_PACK(4);
    FLOAT m_fMaxZoom;
    FLOAT m_fFireAnimRate;
    FLOAT m_fFPBlend;
    FLOAT BobDamping;
    FLOAT m_fReloadTime;
    FLOAT m_fReloadEmptyTime;
    FLOAT m_fPauseWhenChanging;
    class USound* m_ReloadSound;
    class UTexture* m_ScopeTexture;
    class UTexture* m_ScopeAdd;
    class UStaticMesh* m_WithScopeSM;
    class UTexture* m_FPMuzzleFlashTexture;
    class USound* m_EquipSnd;
    class USound* m_UnEquipSnd;
    class USound* m_ReloadSnd;
    class USound* m_ReloadEmptySnd;
    class USound* m_ChangeROFSnd;
    class USound* m_SingleFireStereoSnd;
    class USound* m_SingleFireEndStereoSnd;
    class USound* m_BurstFireStereoSnd;
    class USound* m_FullAutoStereoSnd;
    class USound* m_FullAutoEndMonoSnd;
    class USound* m_FullAutoEndStereoSnd;
    class USound* m_EmptyMagSnd;
    class USound* m_TriggerSnd;
    class USound* m_ShellSingleFireSnd;
    class USound* m_ShellBurstFireSnd;
    class USound* m_ShellFullAutoSnd;
    class USound* m_ShellEndFullAutoSnd;
    class USound* m_CommonWeaponZoomSnd;
    class USound* m_SniperZoomFirstSnd;
    class USound* m_SniperZoomSecondSnd;
    class USound* m_BipodSnd;
    class UMaterial* m_HUDTexture;
    FName m_PawnWaitAnimLow;
    FName m_PawnWaitAnimHigh;
    FName m_PawnWaitAnimProne;
    FName m_PawnFiringAnim;
    FName m_PawnFiringAnimProne;
    FName m_PawnReloadAnim;
    FName m_PawnReloadAnimTactical;
    FName m_PawnReloadAnimProne;
    FName m_PawnReloadAnimProneTactical;
    FName m_AttachPoint;
    FName m_HoldAttachPoint;
    FName m_HoldAttachPoint2;
    FVector m_vPositionOffset;
    FVector m_FPFlashLocation;
    FPlane m_HUDTexturePos;
    FStringNoInit m_NameID;
    FStringNoInit m_WeaponDesc;
    FStringNoInit m_WeaponShortName;
    FStringNoInit m_szMagazineClass;
    FStringNoInit m_szMuzzleClass;
    FStringNoInit m_szSilencerClass;
    FStringNoInit m_szTacticalLightClass;
    void eventShowWeaponParticules(BYTE EWeaponSound)
    {
        AR6EngineWeapon_eventShowWeaponParticules_Parms Parms;
        Parms.EWeaponSound=EWeaponSound;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowWeaponParticules),&Parms);
    }
    void eventUpdateWeaponAttachment()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateWeaponAttachment),NULL);
    }
    BITFIELD eventIsGoggles()
    {
        AR6EngineWeapon_eventIsGoggles_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsGoggles),&Parms);
        return Parms.ReturnValue;
    }
    void eventSetIdentifyTarget(BITFIELD bIdentifyCharacter, BITFIELD bFriendly, const FString& characterName)
    {
        AR6EngineWeapon_eventSetIdentifyTarget_Parms Parms;
        Parms.bIdentifyCharacter=bIdentifyCharacter;
        Parms.bFriendly=bFriendly;
        Parms.characterName=characterName;
        ProcessEvent(FindFunctionChecked(ENGINE_SetIdentifyTarget),&Parms);
    }
    void eventPawnStoppedMoving()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PawnStoppedMoving),NULL);
    }
    void eventPawnIsMoving()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PawnIsMoving),NULL);
    }
    void eventDeployWeaponBipod(BITFIELD bBipodOpen)
    {
        AR6EngineWeapon_eventDeployWeaponBipod_Parms Parms;
        Parms.bBipodOpen=bBipodOpen;
        ProcessEvent(FindFunctionChecked(ENGINE_DeployWeaponBipod),&Parms);
    }
    DECLARE_CLASS(AR6EngineWeapon,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6EngineWeapon)
};


class ENGINE_API AR6AbstractCircumstantialActionQuery : public AActor
{
public:
    BYTE iHasAction;
    BYTE iInRange;
    BYTE iPlayerActionID;
    BYTE iTeamActionID;
    BYTE iTeamActionIDList[4];
    BYTE iTeamSubActionsIDList[16];
    INT iMenuChoice;
    INT iSubMenuChoice;
    BITFIELD bCanBeInterrupted:1 GCC_PACK(4);
    FLOAT fPlayerActionTimeRequired GCC_PACK(4);
    FLOAT m_fPressedTime;
    class AActor* aQueryOwner;
    class AActor* aQueryTarget;
    class UTexture* textureIcon;
    DECLARE_CLASS(AR6AbstractCircumstantialActionQuery,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6AbstractCircumstantialActionQuery)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


class ENGINE_API AR6GlowLight : public ALight
{
public:
    BITFIELD m_bFadeWithDistance:1 GCC_PACK(4);
    BITFIELD m_bInverseScale:1;
    FLOAT m_fAngle GCC_PACK(4);
    FLOAT m_fFadeValue;
    FLOAT m_fDistanceValue;
    class AActor* m_pOwnerNightVision;
    DECLARE_CLASS(AR6GlowLight,ALight,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AR6GlowLight)
};


class ENGINE_API ANote : public AActor
{
public:
    FStringNoInit Text;
    DECLARE_CLASS(ANote,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANote)
};


class ENGINE_API AKActor : public AActor
{
public:
    BITFIELD bKTakeShot:1 GCC_PACK(4);
    BITFIELD bOrientImpactEffect:1;
    FLOAT ImpactVolume GCC_PACK(4);
    FLOAT ImpactInterval;
    class UClass* ImpactEffect;
    TArrayNoInit<class USound*> ImpactSounds;
    FLOAT LastImpactTime;
    DECLARE_CLASS(AKActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKActor)
};


class ENGINE_API AKTire : public AKActor
{
public:
    BITFIELD bTireOnGround:1 GCC_PACK(4);
    BITFIELD bReceiveStateNew:1;
    FLOAT RollFriction GCC_PACK(4);
    FLOAT LateralFriction;
    FLOAT RollSlip;
    FLOAT LateralSlip;
    FLOAT MinSlip;
    FLOAT SlipRate;
    FLOAT Softness;
    FLOAT Adhesion;
    FLOAT Restitution;
    FLOAT GroundSlipVel;
    FLOAT SpinSpeed;
    class AKCarWheelJoint* WheelJoint;
    class UMaterial* GroundMaterial;
    FVector GroundSlipVec;
    DECLARE_CLASS(AKTire,AKActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKTire)
};


struct AKConstraint_eventKForceExceed_Parms
{
    FLOAT forceMag;
};
class ENGINE_API AKConstraint : public AKActor
{
public:
    BITFIELD bKDisableCollision:1 GCC_PACK(4);
    BITFIELD bKForceFrameUpdate:1;
    FLOAT KForceThreshold GCC_PACK(4);
    class AActor* KConstraintActor1;
    class AActor* KConstraintActor2;
    FName KConstraintBone1;
    FName KConstraintBone2;
    FVector KPos1;
    FVector KPriAxis1;
    FVector KSecAxis1;
    FVector KPos2;
    FVector KPriAxis2;
    FVector KSecAxis2;
    INT KConstraintData;
    DECLARE_FUNCTION(execKGetConstraintTorque);
    DECLARE_FUNCTION(execKGetConstraintForce);
    DECLARE_FUNCTION(execKUpdateConstraintParams);
    void eventKForceExceed(FLOAT forceMag)
    {
        AKConstraint_eventKForceExceed_Parms Parms;
        Parms.forceMag=forceMag;
        ProcessEvent(FindFunctionChecked(ENGINE_KForceExceed),&Parms);
    }
    DECLARE_CLASS(AKConstraint,AKActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKConstraint)
};


class ENGINE_API AKCarWheelJoint : public AKConstraint
{
public:
    BITFIELD bKSteeringLocked:1 GCC_PACK(4);
    FLOAT KSteerAngle GCC_PACK(4);
    FLOAT KProportionalGap;
    FLOAT KMaxSteerTorque;
    FLOAT KMaxSteerSpeed;
    FLOAT KMotorTorque;
    FLOAT KMaxSpeed;
    FLOAT KBraking;
    FLOAT KSuspLowLimit;
    FLOAT KSuspHighLimit;
    FLOAT KSuspStiffness;
    FLOAT KSuspDamping;
    FLOAT KSuspRef;
    FLOAT KWheelHeight;
    DECLARE_CLASS(AKCarWheelJoint,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKCarWheelJoint)
};


class ENGINE_API AKConeLimit : public AKConstraint
{
public:
    FLOAT KHalfAngle;
    FLOAT KStiffness;
    FLOAT KDamping;
    DECLARE_CLASS(AKConeLimit,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKConeLimit)
};

enum EHingeType
{
    HT_Normal               =0,
    HT_Springy              =1,
    HT_Motor                =2,
    HT_Controlled           =3,
    HT_MAX                  =4,
};

class ENGINE_API AKHinge : public AKConstraint
{
public:
    BYTE KHingeType;
    BITFIELD KUseAltDesired:1 GCC_PACK(4);
    FLOAT KStiffness GCC_PACK(4);
    FLOAT KDamping;
    FLOAT KDesiredAngVel;
    FLOAT KMaxTorque;
    FLOAT KDesiredAngle;
    FLOAT KProportionalGap;
    FLOAT KAltDesiredAngle;
    FLOAT KCurrentAngle;
    DECLARE_CLASS(AKHinge,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKHinge)
};


class ENGINE_API AKBSJoint : public AKConstraint
{
public:
    DECLARE_CLASS(AKBSJoint,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKBSJoint)
};

enum ESurfaceType
{
    SURF_Generic            =0,
    SURF_GenericHardSurface =1,
    SURF_DustyConcrete      =2,
    SURF_CompactSnow        =3,
    SURF_DeepSnow           =4,
    SURF_Dirt               =5,
    SURF_HardWood           =6,
    SURF_BoomyWood          =7,
    SURF_Carpet             =8,
    SURF_Grate              =9,
    SURF_HardMetal          =10,
    SURF_SheetMetal         =11,
    SURF_WaterPuddle        =12,
    SURF_DeepWater          =13,
    SURF_OilPuddle          =14,
    SURF_DirtyGrass         =15,
    SURF_CleanGrass         =16,
    SURF_Gravel             =17,
    SURF_MAX                =18,
};

class ENGINE_API UMaterial : public UObject
{
public:
    BYTE m_eSurfIdForSnd;
    BYTE m_iNightVisionFactor;
    INT m_SpecificRenderData;
    INT m_iPenetration;
    INT m_iResistanceFactor;
    BITFIELD m_bForceNoSort:1 GCC_PACK(4);
    BITFIELD m_bDynamicMaterial:1;
    BITFIELD m_bProneTrail:1;
    class UMaterial* FallbackMaterial GCC_PACK(4);
    class UMaterial* DefaultMaterial;
    class UMaterial* m_pUnused;
    class UClass* m_pHitEffect;
    class UClass* m_pFootStep;
    BITFIELD UseFallback:1 GCC_PACK(4);
    BITFIELD Validated:1;
    DECLARE_CLASS(UMaterial,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMaterial)
};


class ENGINE_API URenderedMaterial : public UMaterial
{
public:
    DECLARE_CLASS(URenderedMaterial,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(URenderedMaterial)
};

enum ETextureFormat
{
    TEXF_P8                 =0,
    TEXF_RGBA7              =1,
    TEXF_RGB16              =2,
    TEXF_DXT1               =3,
    TEXF_RGB8               =4,
    TEXF_RGBA8              =5,
    TEXF_NODATA             =6,
    TEXF_DXT3               =7,
    TEXF_DXT5               =8,
    TEXF_L8                 =9,
    TEXF_G16                =10,
    TEXF_RRRGGGBBB          =11,
    TEXF_MAX                =12,
};
enum ETexClampMode
{
    TC_Wrap                 =0,
    TC_Clamp                =1,
    TC_MAX                  =2,
};

class ENGINE_API UBitmapMaterial : public URenderedMaterial
{
public:
    BYTE Format;
    BYTE UClampMode;
    BYTE VClampMode;
    BYTE UBits;
    BYTE VBits;
    INT USize;
    INT VSize;
    INT UClamp;
    INT VClamp;
    DECLARE_CLASS(UBitmapMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBitmapMaterial)
};

enum EEnvMapTransformType
{
    EMTT_ViewSpace          =0,
    EMTT_WorldSpace         =1,
    EMTT_LightSpace         =2,
    EMTT_MAX                =3,
};
enum ELODSet
{
    LODSET_None             =0,
    LODSET_World            =1,
    LODSET_Skin             =2,
    LODSET_Lightmap         =3,
    LODSET_MAX              =4,
};

class ENGINE_API UTexture : public UBitmapMaterial
{
public:
    BYTE EnvMapTransformType;
    BYTE LODSet;
    BYTE PrimeCount;
    BYTE CompFormat;
    INT InternalTime[2];
    INT m_dwSize;
    INT m_dwGetSizeLastFrame;
    BITFIELD bMasked:1 GCC_PACK(4);
    BITFIELD bAlphaTexture:1;
    BITFIELD bHighColorQuality:1;
    BITFIELD bHighTextureQuality:1;
    BITFIELD bRealtime:1;
    BITFIELD bParametric:1;
    BITFIELD bHasComp:1;
    FLOAT Specular GCC_PACK(4);
    FLOAT MinFrameRate;
    FLOAT MaxFrameRate;
    class UPalette* Palette;
    class UTexture* DetailTexture;
    class UTexture* EnvironmentMap;
    class UTexture* AnimNext;
    TArrayNoInit<INT> Mips;
    FColor MipZero;
    FColor MaxColor;
    BYTE PrimeCurrent;
    INT RenderInterface;
    INT __LastUpdateTime[2];
    BITFIELD bRealtimeChanged:1 GCC_PACK(4);
    FLOAT Accumulator GCC_PACK(4);
    class UTexture* AnimCurrent;
    DECLARE_CLASS(UTexture,UBitmapMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexture)
};


class ENGINE_API UCubemap : public UTexture
{
public:
    class UTexture* Faces[6];
    INT CubemapRenderInterface;
    DECLARE_CLASS(UCubemap,UTexture,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCubemap)
};


class ENGINE_API UShadowBitmapMaterial : public UBitmapMaterial
{
public:
    BYTE m_bOpacity;
    BITFIELD Dirty:1 GCC_PACK(4);
    BITFIELD m_bValid:1;
    FLOAT LightDistance GCC_PACK(4);
    FLOAT LightFOV;
    class AActor* ShadowActor;
    FVector LightDirection;
    FVector m_LightLocation;
    INT TextureInterfaces[2];
    DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UShadowBitmapMaterial)
};


class ENGINE_API UTerrainMaterial : public URenderedMaterial
{
public:
    BYTE RenderMethod;
    BITFIELD FirstPass:1 GCC_PACK(4);
    TArrayNoInit<FTerrainMaterialLayer> Layers GCC_PACK(4);
    DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTerrainMaterial)
};


class ENGINE_API UParticleMaterial : public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    class UBitmapMaterial* BitmapMaterial;
    INT NumProjectors;
    BITFIELD AcceptsProjectors:1 GCC_PACK(4);
    FParticleProjectorInfo Projectors[8] GCC_PACK(4);
    DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};


class ENGINE_API UDiffuseAttenuationMaterial : public URenderedMaterial
{
public:
    class UMaterial* m_pMaterial;
    class UMaterial* m_pMaterialGradient;
    DECLARE_CLASS(UDiffuseAttenuationMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDiffuseAttenuationMaterial)
};


class ENGINE_API UVertexColor : public URenderedMaterial
{
public:
    DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};


class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantMaterial)
};

enum EColorFadeType
{
    FC_Linear               =0,
    FC_Sinusoidal           =1,
    FC_MAX                  =2,
};

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    BYTE ColorFadeType;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    FColor Color1;
    FColor Color2;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFadeColor)
};


class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color;
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantColor)
};

enum EOutputBlending
{
    OB_Normal               =0,
    OB_Masked               =1,
    OB_Modulate             =2,
    OB_Translucent          =3,
    OB_Invisible            =4,
    OB_Brighten             =5,
    OB_Darken               =6,
    OB_MAX                  =7,
};

class ENGINE_API UShader : public URenderedMaterial
{
public:
    BYTE OutputBlending;
    BITFIELD TwoSided:1 GCC_PACK(4);
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD PerformLightingOnSpecularPass:1;
    class UMaterial* Diffuse GCC_PACK(4);
    class UMaterial* Opacity;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    class UMaterial* Detail;
    DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UShader)
};


class ENGINE_API UModifier : public UMaterial
{
public:
    class UMaterial* Material;
    DECLARE_CLASS(UModifier,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UModifier)
};


class ENGINE_API UOpacityModifier : public UModifier
{
public:
    BITFIELD bOverrideTexModifier:1 GCC_PACK(4);
    class UMaterial* Opacity GCC_PACK(4);
    DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};


class ENGINE_API UMaterialSwitch : public UModifier
{
public:
    INT Current;
    TArrayNoInit<class UMaterial*> Materials;
    DECLARE_CLASS(UMaterialSwitch,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMaterialSwitch)
};

enum EFrameBufferBlending
{
    FB_Overwrite            =0,
    FB_Modulate             =1,
    FB_AlphaBlend           =2,
    FB_AlphaModulate_MightNotFogCorrectly=3,
    FB_Translucent          =4,
    FB_Darken               =5,
    FB_Brighten             =6,
    FB_Invisible            =7,
    FB_Modulate1X           =8,
    FB_Highlight            =9,
    FB_MAX                  =10,
};

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending;
    BYTE AlphaRef;
    BITFIELD ZWrite:1 GCC_PACK(4);
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BITFIELD m_bAddZBias:1;
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFinalBlend)
};

enum ETexCoordSrc
{
    TCS_Stream0             =0,
    TCS_Stream1             =1,
    TCS_Stream2             =2,
    TCS_Stream3             =3,
    TCS_Stream4             =4,
    TCS_Stream5             =5,
    TCS_Stream6             =6,
    TCS_Stream7             =7,
    TCS_WorldCoords         =8,
    TCS_CameraCoords        =9,
    TCS_WorldEnvMapCoords   =10,
    TCS_CameraEnvMapCoords  =11,
    TCS_ProjectorCoords     =12,
    TCS_NoChange            =13,
    TCS_NormalViewSpaceEnvMap=14,
    TCS_MAX                 =15,
};
enum ETexCoordCount
{
    TCN_2DCoords            =0,
    TCN_3DCoords            =1,
    TCN_4DCoords            =2,
    TCN_MAX                 =3,
};

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexModifier)
};


class ENGINE_API UTexCoordSource : public UTexModifier
{
public:
    INT SourceChannel;
    DECLARE_CLASS(UTexCoordSource,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexCoordSource)
};


class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix;
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexMatrix)
};

enum ETexEnvMapType
{
    EM_WorldSpace           =0,
    EM_CameraSpace          =1,
    EM_MAX                  =2,
};

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType;
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexEnvMap)
};

enum ETexOscillationType
{
    OT_Pan                  =0,
    OT_Stretch              =1,
    OT_StretchRepeat        =2,
    OT_MAX                  =3,
};

class ENGINE_API UTexOscillator : public UTexModifier
{
public:
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    FLOAT UOffset;
    FLOAT VOffset;
    FMatrix M;
    DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexOscillator)
};

enum ETexRotationType
{
    TR_FixedRotation        =0,
    TR_ConstantlyRotating   =1,
    TR_OscillatingRotation  =2,
    TR_MAX                  =3,
};

class ENGINE_API UTexRotator : public UTexModifier
{
public:
    BYTE TexRotationType;
    BITFIELD ConstantRotation:1 GCC_PACK(4);
    FLOAT UOffset GCC_PACK(4);
    FLOAT VOffset;
    FMatrix M;
    FRotator Rotation;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexRotator)
};


class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
    FMatrix M;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexScaler)
};


class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FLOAT PanRate;
    FRotator PanDirection;
    FMatrix M;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexPanner)
};


class ENGINE_API UColorModifier : public UModifier
{
public:
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    FColor Color GCC_PACK(4);
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

enum EColorOperation
{
    CO_Use_Color_From_Material1=0,
    CO_Use_Color_From_Material2=1,
    CO_Multiply             =2,
    CO_Add                  =3,
    CO_Subtract             =4,
    CO_AlphaBlend_With_Mask =5,
    CO_Add_With_Mask_Modulation=6,
    CO_Use_Color_From_Mask  =7,
    CO_Bump                 =8,
    CO_MAX                  =9,
};
enum EAlphaOperation
{
    AO_Use_Mask             =0,
    AO_Multiply             =1,
    AO_Add                  =2,
    AO_Use_Alpha_From_Material1=3,
    AO_Use_Alpha_From_Material2=4,
    AO_MAX                  =5,
};

class ENGINE_API UCombiner : public UMaterial
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    BITFIELD InvertMask:1 GCC_PACK(4);
    BITFIELD Modulate2X:1;
    BITFIELD Modulate4X:1;
    class UMaterial* Material1 GCC_PACK(4);
    class UMaterial* Material2;
    class UMaterial* Mask;
    DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCombiner)
};


class ENGINE_API UPalette : public UObject
{
public:
    TArrayNoInit<FColor> Colors;
    DECLARE_CLASS(UPalette,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPalette)
};

enum EBlendMode
{
    BM_MODULATE             =0,
    BM_MODULATE2X           =1,
    BM_MODULATE4X           =2,
    BM_ADD                  =3,
    BM_ADDSIGNED            =4,
    BM_ADDSIGNED2X          =5,
    BM_SUBTRACT             =6,
    BM_ADDSMOOTH            =7,
    BM_BLENDDIFFUSEALPHA    =8,
    BM_BLENDTEXTUREALPHA    =9,
    BM_BLENDFACTORALPHA     =10,
    BM_BLENDTEXTUREALPHAPM  =11,
    BM_BLENDCURRENTALPHA    =12,
    BM_PREMODULATE          =13,
    BM_MODULATEALPHA_ADDCOLOR=14,
    BM_MODULATEINVALPHA_ADDCOLOR=15,
    BM_MODULATEINVCOLOR_ADDALPHA=16,
    BM_HACK                 =17,
    BM_MAX                  =18,
};
enum EParticleDrawStyle
{
    PTDS_Regular            =0,
    PTDS_AlphaBlend         =1,
    PTDS_Modulated          =2,
    PTDS_Translucent        =3,
    PTDS_AlphaModulate_MightNotFogCorrectly=4,
    PTDS_Darken             =5,
    PTDS_Brighten           =6,
    PTDS_MAX                =7,
};
enum EParticleCoordinateSystem
{
    PTCS_Independent        =0,
    PTCS_Relative           =1,
    PTCS_Absolute           =2,
    PTCS_MAX                =3,
};
enum EParticleRotationSource
{
    PTRS_None               =0,
    PTRS_Actor              =1,
    PTRS_Offset             =2,
    PTRS_Normal             =3,
    PTRS_MAX                =4,
};
enum EParticleVelocityDirection
{
    PTVD_None               =0,
    PTVD_StartPositionAndOwner=1,
    PTVD_OwnerAndStartPosition=2,
    PTVD_AddRadial          =3,
    PTVD_MAX                =4,
};
enum EParticleStartLocationShape
{
    PTLS_Box                =0,
    PTLS_Sphere             =1,
    PTLS_Polar              =2,
    PTLS_MAX                =3,
};
enum EParticleEffectAxis
{
    PTEA_NegativeX          =0,
    PTEA_PositiveZ          =1,
    PTEA_MAX                =2,
};
enum EParticleCollisionSound
{
    PTSC_None               =0,
    PTSC_LinearGlobal       =1,
    PTSC_LinearLocal        =2,
    PTSC_Random             =3,
    PTSC_MAX                =4,
};

class ENGINE_API UParticleEmitter : public UObject
{
public:
    BYTE CollisionSound;
    BYTE CoordinateSystem;
    BYTE EffectAxis;
    BYTE StartLocationShape;
    BYTE UseRotationFrom;
    BYTE DrawStyle;
    BYTE GetVelocityDirectionFrom;
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    INT MaxParticles;
    INT AddLocationFromOtherEmitter;
    INT AlphaRef;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    INT SubdivisionStart;
    INT SubdivisionEnd;
    INT AddVelocityFromOtherEmitter;
    INT m_iUseFastZCollision;
    INT m_iPaused;
    BITFIELD UseCollision:1 GCC_PACK(4);
    BITFIELD UseCollisionPlanes:1;
    BITFIELD UseMaxCollisions:1;
    BITFIELD UseSpawnedVelocityScale:1;
    BITFIELD UseColorScale:1;
    BITFIELD FadeOut:1;
    BITFIELD FadeIn:1;
    BITFIELD UseActorForces:1;
    BITFIELD ResetAfterChange:1;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    BITFIELD AlphaTest:1;
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BITFIELD SpinParticles:1;
    BITFIELD DampRotation:1;
    BITFIELD UseSizeScale:1;
    BITFIELD UseRegularSizeScale:1;
    BITFIELD UniformSize:1;
    BITFIELD AutomaticInitialSpawning:1;
    BITFIELD BlendBetweenSubdivisions:1;
    BITFIELD UseSubdivisionScale:1;
    BITFIELD UseRandomSubdivision:1;
    FLOAT ColorScaleRepeats GCC_PACK(4);
    FLOAT FadeOutStartTime;
    FLOAT FadeInEndTime;
    FLOAT SizeScaleRepeats;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    FLOAT SecondsBeforeInactive;
    FLOAT MinSquaredVelocity;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class UTexture* Texture;
    TArrayNoInit<FPlane> CollisionPlanes;
    TArrayNoInit<FParticleSound> Sounds;
    TArrayNoInit<FParticleColorScale> ColorScale;
    TArrayNoInit<FParticleTimeScale> SizeScale;
    TArrayNoInit<FLOAT> SubdivisionScale;
    FVector Acceleration;
    FVector ExtentMultiplier;
    FRangeVector DampingFactorRange;
    FRange MaxCollisions;
    FRangeVector SpawnedVelocityScaleRange;
    FRange CollisionSoundIndex;
    FRange CollisionSoundProbability;
    FRangeVector ColorMultiplierRange;
    FPlane FadeOutFactor;
    FPlane FadeInFactor;
    FRange AutoResetTimeRange;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    FRange SphereRadiusRange;
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    FRotator RotationOffset;
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    FRangeVector RotationDampingFactorRange;
    FVector RotationNormal;
    FRangeVector StartSizeRange;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    FRangeVector AddVelocityMultiplierRange;
    FStringNoInit Name;
    INT ParticleIndex;
    INT ActiveParticles;
    INT OtherIndex;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    INT KillPending;
    BITFIELD Initialized:1 GCC_PACK(4);
    BITFIELD Inactive:1;
    BITFIELD RealDisableFogging:1;
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    FLOAT InactiveTime GCC_PACK(4);
    FLOAT PPSFraction;
    FLOAT InitialDelay;
    FLOAT TimeTillReset;
    FLOAT MaxSizeScale;
    class AEmitter* Owner;
    TArrayNoInit<FParticle> Particles;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    FVector GlobalOffset;
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleEmitter)
};

enum EParticleDirectionUsage
{
    PTDU_None               =0,
    PTDU_Up                 =1,
    PTDU_Right              =2,
    PTDU_Forward            =3,
    PTDU_Normal             =4,
    PTDU_UpAndNormal        =5,
    PTDU_RightAndNormal     =6,
    PTDU_MAX                =7,
};

class ENGINE_API USpriteEmitter : public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    FVector RealProjectionNormal;
    DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USpriteEmitter)
};


class ENGINE_API USparkEmitter : public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    TArrayNoInit<FParticleSparkData> SparkData;
    DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USparkEmitter)
};


class ENGINE_API UMeshEmitter : public UParticleEmitter
{
public:
    BITFIELD UseMeshBlendMode:1 GCC_PACK(4);
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    class UStaticMesh* StaticMesh GCC_PACK(4);
    FVector MeshExtent;
    DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMeshEmitter)
};

enum EBeamEndPointType
{
    PTEP_Velocity           =0,
    PTEP_Distance           =1,
    PTEP_Offset             =2,
    PTEP_Actor              =3,
    PTEP_TraceOffset        =4,
    PTEP_OffsetAsAbsolute   =5,
    PTEP_MAX                =6,
};

class ENGINE_API UBeamEmitter : public UParticleEmitter
{
public:
    BYTE DetermineEndPointBy;
    INT RotatingSheets;
    INT LowFrequencyPoints;
    INT HighFrequencyPoints;
    INT BranchEmitter;
    BITFIELD UseHighFrequencyScale:1 GCC_PACK(4);
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    BITFIELD UseBranching:1;
    BITFIELD LinkupLifetime:1;
    FLOAT BeamTextureUScale GCC_PACK(4);
    FLOAT BeamTextureVScale;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FRange BeamDistanceRange;
    FRangeVector LowFrequencyNoiseRange;
    FRangeVector HighFrequencyNoiseRange;
    FRange BranchProbability;
    FRange BranchSpawnAmountRange;
    INT SheetsUsed;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBeamEmitter)
};


class ENGINE_API UAnimNotify : public UObject
{
public:
    INT Revision;
    DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify)
};


class ENGINE_API UAnimNotify_MatSubAction : public UAnimNotify
{
public:
    class UMatSubAction* SubAction;
    DECLARE_CLASS(UAnimNotify_MatSubAction,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_MatSubAction)
};


struct UAnimNotify_Scripted_eventNotify_Parms
{
    class AActor* Owner;
};
class ENGINE_API UAnimNotify_Scripted : public UAnimNotify
{
public:
    void eventNotify(class AActor* Owner)
    {
        UAnimNotify_Scripted_eventNotify_Parms Parms;
        Parms.Owner=Owner;
        ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
    }
    DECLARE_CLASS(UAnimNotify_Scripted,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_Scripted)
};


class ENGINE_API UAnimNotify_Script : public UAnimNotify
{
public:
    FName NotifyName;
    DECLARE_CLASS(UAnimNotify_Script,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_Script)
};


class ENGINE_API UAnimNotify_Sound : public UAnimNotify
{
public:
    INT Radius;
    FLOAT Volume;
    class USound* Sound;
    DECLARE_CLASS(UAnimNotify_Sound,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_Sound)
};


class ENGINE_API UAnimNotify_DestroyEffect : public UAnimNotify
{
public:
    BITFIELD bExpireParticles:1 GCC_PACK(4);
    FName DestroyTag GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_DestroyEffect,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_DestroyEffect)
};


class ENGINE_API UAnimNotify_Effect : public UAnimNotify
{
public:
    BITFIELD Attach:1 GCC_PACK(4);
    FLOAT DrawScale GCC_PACK(4);
    FName Bone;
    FName Tag;
    class UClass* EffectClass;
    FVector OffsetLocation;
    FRotator OffsetRotation;
    FVector DrawScale3D;
    class AActor* LastSpawnedEffect;
    DECLARE_CLASS(UAnimNotify_Effect,UAnimNotify,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimNotify_Effect)
};


class ENGINE_API UMatObject : public UObject
{
public:
    DECLARE_CLASS(UMatObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatObject)
};

enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Interpolating      =7,
    PHYS_MovingBrush        =8,
    PHYS_Spider             =9,
    PHYS_Trailer            =10,
    PHYS_Ladder             =11,
    PHYS_RootMotion         =12,
    PHYS_Karma              =13,
    PHYS_KarmaRagDoll       =14,
    PHYS_MAX                =15,
};

struct UMatAction_eventActionStart_Parms
{
    class AActor* Viewer;
};
struct UMatAction_eventInitialize_Parms
{
};
class ENGINE_API UMatAction : public UMatObject
{
public:
    BYTE m_PhysicsActor;
    BITFIELD bSmoothCorner:1 GCC_PACK(4);
    BITFIELD bConstantPathVelocity:1;
    BITFIELD m_bCollideActor:1;
    FLOAT Duration GCC_PACK(4);
    FLOAT PathVelocity;
    FLOAT PathLength;
    class AInterpolationPoint* IntPoint;
    class UTexture* Icon;
    TArrayNoInit<class UMatSubAction*> SubActions;
    FVector StartControlPoint;
    FVector EndControlPoint;
    FStringNoInit Comment;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    TArrayNoInit<FVector> SampleLocations;
    void eventActionStart(class AActor* Viewer)
    {
        UMatAction_eventActionStart_Parms Parms;
        Parms.Viewer=Viewer;
        ProcessEvent(FindFunctionChecked(ENGINE_ActionStart),&Parms);
    }
    void eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialize),NULL);
    }
    DECLARE_CLASS(UMatAction,UMatObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatAction)
};

enum EPathStyle
{
    PATHSTYLE_Linear        =0,
    PATHSTYLE_Bezier        =1,
    PATHSTYLE_MAX           =2,
};

class ENGINE_API UActionMoveCamera : public UMatAction
{
public:
    BYTE PathStyle;
    DECLARE_CLASS(UActionMoveCamera,UMatAction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionMoveCamera)
};


class ENGINE_API UActionMoveActor : public UActionMoveCamera
{
public:
    DECLARE_CLASS(UActionMoveActor,UActionMoveCamera,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionMoveActor)
};


class ENGINE_API UActionPause : public UMatAction
{
public:
    DECLARE_CLASS(UActionPause,UMatAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionPause)
};

enum ESAStatus
{
    SASTATUS_Waiting        =0,
    SASTATUS_Running        =1,
    SASTATUS_Ending         =2,
    SASTATUS_Expired        =3,
    SASTATUS_MAX            =4,
};

struct UMatSubAction_eventInitialize_Parms
{
};
class ENGINE_API UMatSubAction : public UMatObject
{
public:
    BYTE Status;
    FLOAT Delay;
    FLOAT Duration;
    class UTexture* Icon;
    class ASceneManager* m_pSceneManager;
    FStringNoInit Desc;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    void eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialize),NULL);
    }
    DECLARE_CLASS(UMatSubAction,UMatObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatSubAction)
};


class ENGINE_API USubActionSceneSpeed : public UMatSubAction
{
public:
    FRange SceneSpeed;
    DECLARE_CLASS(USubActionSceneSpeed,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionSceneSpeed)
};


class ENGINE_API USubActionGameSpeed : public UMatSubAction
{
public:
    FRange GameSpeed;
    DECLARE_CLASS(USubActionGameSpeed,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionGameSpeed)
};


class ENGINE_API USubActionOrientation : public UMatSubAction
{
public:
    FOrientation CamOrientation;
    DECLARE_CLASS(USubActionOrientation,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionOrientation)
};


class ENGINE_API USubActionCameraShake : public UMatSubAction
{
public:
    FRangeVector Shake;
    DECLARE_CLASS(USubActionCameraShake,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionCameraShake)
};


class ENGINE_API USubActionFOV : public UMatSubAction
{
public:
    FRange FOV;
    DECLARE_CLASS(USubActionFOV,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionFOV)
};


class ENGINE_API USubActionTrigger : public UMatSubAction
{
public:
    FName EventName;
    DECLARE_CLASS(USubActionTrigger,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionTrigger)
};


class ENGINE_API USubActionFade : public UMatSubAction
{
public:
    BITFIELD bFadeOut:1 GCC_PACK(4);
    FColor FadeColor GCC_PACK(4);
    DECLARE_CLASS(USubActionFade,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionFade)
};


class ENGINE_API USubActionCameraEffect : public UMatSubAction
{
public:
    BITFIELD DisableAfterDuration:1 GCC_PACK(4);
    FLOAT StartAlpha GCC_PACK(4);
    FLOAT EndAlpha;
    class UCameraEffect* CameraEffect;
    DECLARE_CLASS(USubActionCameraEffect,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionCameraEffect)
};

enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_UnknownF0            =240,
    IK_UnknownF1            =241,
    IK_UnknownF2            =242,
    IK_UnknownF3            =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};

class ENGINE_API UInteractions : public UObject
{
public:
    DECLARE_CLASS(UInteractions,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractions)
};


struct UInteractionMaster_eventProcess_Message_Parms
{
    FString Msg;
    FLOAT MsgLife;
    TArray<class UInteraction*> InteractionArray;
};
struct UInteractionMaster_eventProcess_Tick_Parms
{
    TArray<class UInteraction*> InteractionArray;
    FLOAT DeltaTime;
};
struct UInteractionMaster_eventProcess_PostRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_PreRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventProcess_KeyType_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventSetFocusTo_Parms
{
    class UInteraction* Inter;
    class UPlayer* ViewportOwner;
};
struct UInteractionMaster_eventRemoveInteraction_Parms
{
    class UInteraction* RemoveMe;
};
struct UInteractionMaster_eventAddInteraction_Parms
{
    FString InteractionName;
    class UPlayer* AttachTo;
    class UInteraction* ReturnValue;
};
class ENGINE_API UInteractionMaster : public UInteractions
{
public:
    class AR6StartGameInfo* m_StartGameInfo;
    class UR6GameMenuCom* m_MenuCommunication;
    class UClient* Client;
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    DECLARE_FUNCTION(execTravel);
    void eventProcess_Message(const FString& Msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
    {
        UInteractionMaster_eventProcess_Message_Parms Parms;
        Parms.Msg=Msg;
        Parms.MsgLife=MsgLife;
        Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
    }
    void eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
    {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
    }
    void eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
    }
    void eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
    }
    BITFIELD eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
    {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
        Key=Parms.Key;
        Action=Parms.Action;
        return Parms.ReturnValue;
    }
    BITFIELD eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key)
    {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
    {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
        Parms.Inter=Inter;
        Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
    }
    void eventRemoveInteraction(class UInteraction* RemoveMe)
    {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
        Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
    }
    class UInteraction* eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
    {
        UInteractionMaster_eventAddInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionName=InteractionName;
        Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractionMaster)
};


struct UInteraction_eventConvertKeyToLocalisation_Parms
{
    BYTE _Key;
    FString _szEnumKeyName;
    FString ReturnValue;
};
struct UInteraction_eventLaunchR6MainMenu_Parms
{
};
struct UInteraction_eventMenuLoadProfile_Parms
{
    BITFIELD _bServerProfile;
};
struct UInteraction_eventNotifyAfterLevelChange_Parms
{
};
struct UInteraction_eventNotifyLevelChange_Parms
{
};
struct UInteraction_eventR6ProgressMsg_Parms
{
    FString _Str1;
    FString _Str2;
    FLOAT Seconds;
};
struct UInteraction_eventR6ConnectionInProgress_Parms
{
};
struct UInteraction_eventR6ConnectionInterrupted_Parms
{
};
struct UInteraction_eventR6ConnectionSuccess_Parms
{
};
struct UInteraction_eventR6ConnectionFailed_Parms
{
    FString szError;
};
struct UInteraction_eventConnectionFailed_Parms
{
};
struct UInteraction_eventUserDisconnected_Parms
{
};
struct UInteraction_eventServerDisconnected_Parms
{
};
struct UInteraction_eventInitialized_Parms
{
};
class ENGINE_API UInteraction : public UInteractions
{
public:
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    class UPlayer* ViewportOwner GCC_PACK(4);
    class UInteractionMaster* Master;
    DECLARE_FUNCTION(execScreenToWorld);
    DECLARE_FUNCTION(execWorldToScreen);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execInitialize);
    FString eventConvertKeyToLocalisation(BYTE _Key, const FString& _szEnumKeyName)
    {
        UInteraction_eventConvertKeyToLocalisation_Parms Parms;
        Parms._Key=_Key;
        Parms._szEnumKeyName=_szEnumKeyName;
        ProcessEvent(FindFunctionChecked(ENGINE_ConvertKeyToLocalisation),&Parms);
        return Parms.ReturnValue;
    }
    void eventLaunchR6MainMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LaunchR6MainMenu),NULL);
    }
    void eventMenuLoadProfile(BITFIELD _bServerProfile)
    {
        UInteraction_eventMenuLoadProfile_Parms Parms;
        Parms._bServerProfile=_bServerProfile;
        ProcessEvent(FindFunctionChecked(ENGINE_MenuLoadProfile),&Parms);
    }
    void eventNotifyAfterLevelChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyAfterLevelChange),NULL);
    }
    void eventNotifyLevelChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLevelChange),NULL);
    }
    void eventR6ProgressMsg(const FString& _Str1, const FString& _Str2, FLOAT Seconds)
    {
        UInteraction_eventR6ProgressMsg_Parms Parms;
        Parms._Str1=_Str1;
        Parms._Str2=_Str2;
        Parms.Seconds=Seconds;
        ProcessEvent(FindFunctionChecked(ENGINE_R6ProgressMsg),&Parms);
    }
    void eventR6ConnectionInProgress()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_R6ConnectionInProgress),NULL);
    }
    void eventR6ConnectionInterrupted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_R6ConnectionInterrupted),NULL);
    }
    void eventR6ConnectionSuccess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_R6ConnectionSuccess),NULL);
    }
    void eventR6ConnectionFailed(const FString& szError)
    {
        UInteraction_eventR6ConnectionFailed_Parms Parms;
        Parms.szError=szError;
        ProcessEvent(FindFunctionChecked(ENGINE_R6ConnectionFailed),&Parms);
    }
    void eventConnectionFailed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectionFailed),NULL);
    }
    void eventUserDisconnected()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UserDisconnected),NULL);
    }
    void eventServerDisconnected()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ServerDisconnected),NULL);
    }
    void eventInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
    }
    DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteraction)
};

#define UCONST_MaxHistory 16

struct UConsole_eventGameServiceTick_Parms
{
};
class ENGINE_API UConsole : public UInteraction
{
public:
    BYTE ConsoleKey;
    INT HistoryTop;
    INT HistoryBot;
    INT HistoryCur;
    INT iBrowserMaxNbServerPerPage;
    BITFIELD bTyping:1 GCC_PACK(4);
    BITFIELD bIgnoreKeys:1;
    BITFIELD bShowLog:1;
    BITFIELD bShowConsoleLog:1;
    BITFIELD m_bStringIsTooLong:1;
    BITFIELD m_bStartedByGSClient:1;
    BITFIELD m_bNonUbiMatchMaking:1;
    BITFIELD m_bNonUbiMatchMakingHost:1;
    BITFIELD m_bInterruptConnectionProcess:1;
    FStringNoInit TypedStr GCC_PACK(4);
    FStringNoInit History[16];
    void eventGameServiceTick()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameServiceTick),NULL);
    }
    DECLARE_CLASS(UConsole,UInteraction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConsole)
};


struct UR6ServerInfo_eventRestartServer_Parms
{
};
class ENGINE_API UR6ServerInfo : public UObject
{
public:
    INT MaxPlayers;
    INT NbTerro;
    INT RoundTime;
    INT RoundsPerMatch;
    INT BetweenRoundTime;
    INT BombTime;
    INT DiffLevel;
    BITFIELD CamFirstPerson:1 GCC_PACK(4);
    BITFIELD CamThirdPerson:1;
    BITFIELD CamFreeThirdP:1;
    BITFIELD CamGhost:1;
    BITFIELD CamFadeToBlack:1;
    BITFIELD CamTeamOnly:1;
    BITFIELD UsePassword:1;
    BITFIELD UseAdminPassword:1;
    BITFIELD ShowNames:1;
    BITFIELD InternetServer:1;
    BITFIELD DedicatedServer:1;
    BITFIELD FriendlyFire:1;
    BITFIELD Autobalance:1;
    BITFIELD TeamKillerPenalty:1;
    BITFIELD AllowRadar:1;
    BITFIELD ForceFPersonWeapon:1;
    BITFIELD AIBkp:1;
    BITFIELD RotateMap:1;
    FLOAT SpamThreshold GCC_PACK(4);
    FLOAT ChatLockDuration;
    FLOAT VoteBroadcastMaxFrequency;
    class AR6MapList* m_ServerMapList;
    class AGameInfo* m_GameInfo;
    TArrayNoInit<class UClass*> RestrictedSubMachineGuns;
    TArrayNoInit<class UClass*> RestrictedShotGuns;
    TArrayNoInit<class UClass*> RestrictedAssultRifles;
    TArrayNoInit<class UClass*> RestrictedMachineGuns;
    TArrayNoInit<class UClass*> RestrictedSniperRifles;
    TArrayNoInit<class UClass*> RestrictedPistols;
    TArrayNoInit<class UClass*> RestrictedMachinePistols;
    TArrayNoInit<FString> RestrictedPrimary;
    TArrayNoInit<FString> RestrictedSecondary;
    TArrayNoInit<FString> RestrictedMiscGadgets;
    FStringNoInit ServerName;
    FStringNoInit GamePassword;
    FStringNoInit MOTD;
    FStringNoInit AdminPassword;
    void eventRestartServer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RestartServer),NULL);
    }
    DECLARE_CLASS(UR6ServerInfo,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6ServerInfo)
};

enum EGameOptionsAudioVirtual
{
    eAV_High                =0,
    eAV_Low                 =1,
    eAV_None                =2,
    eAV_MAX                 =3,
};
enum EGameOptionsNetSpeed
{
    eNS_T1                  =0,
    eNS_T3                  =1,
    eNS_Cable               =2,
    eNS_ADSL                =3,
    eNS_Modem               =4,
    eNS_MAX                 =5,
};
enum EGameOptionsGraphicLevel
{
    eGL_Low                 =0,
    eGL_Medium              =1,
    eGL_High                =2,
    eGL_MAX                 =3,
};
enum EGameOptionsEffectLevel
{
    eEL_None                =0,
    eEL_Low                 =1,
    eEL_Medium              =2,
    eEL_High                =3,
    eEL_MAX                 =4,
};

class ENGINE_API UR6GameOptions : public UObject
{
public:
    BYTE AudioVirtual;
    BYTE NetSpeed;
    BYTE TextureDetail;
    BYTE LightmapDetail;
    BYTE RainbowsDetail;
    BYTE HostagesDetail;
    BYTE TerrosDetail;
    BYTE RainbowsShadowLevel;
    BYTE HostagesShadowLevel;
    BYTE TerrosShadowLevel;
    BYTE GoreLevel;
    BYTE DecalsDetail;
    INT AutoTargetSlider;
    INT AmbientVolume;
    INT VoicesVolume;
    INT MusicVolume;
    INT SndQuality;
    INT Gender;
    INT ChangeNameTime;
    INT R6ScreenSizeX;
    INT R6ScreenSizeY;
    INT R6ScreenRefreshRate;
    BITFIELD EAXCompatible:1 GCC_PACK(4);
    BITFIELD m_bChangeResolution:1;
    BITFIELD m_bPBInstalled:1;
    BITFIELD SplashScreen:1;
    BITFIELD UnlimitedPractice:1;
    BITFIELD AlwaysRun:1;
    BITFIELD InvertMouse:1;
    BITFIELD Hide3DView:1;
    BITFIELD PopUpLoadPlan:1;
    BITFIELD PopUpQuickPlay:1;
    BITFIELD SndHardware:1;
    BITFIELD EAX:1;
    BITFIELD HUDShowCharacterInfo:1;
    BITFIELD HUDShowCurrentTeamInfo:1;
    BITFIELD HUDShowOtherTeamInfo:1;
    BITFIELD HUDShowWeaponInfo:1;
    BITFIELD HUDShowFPWeapon:1;
    BITFIELD HUDShowReticule:1;
    BITFIELD HUDShowWaypointInfo:1;
    BITFIELD HUDShowActionIcon:1;
    BITFIELD HUDShowPlayersName:1;
    BITFIELD ShowRadar:1;
    BITFIELD AnimatedGeometry:1;
    BITFIELD HideDeadBodies:1;
    BITFIELD ShowRefreshRates:1;
    BITFIELD LowDetailSmoke:1;
    BITFIELD AllowChangeResInGame:1;
    FLOAT CountDownDelayTime GCC_PACK(4);
    FLOAT MouseSensitivity;
    FColor m_reticuleFriendColour;
    FColor HUDMPColor;
    FColor HUDMPDarkColor;
    FStringNoInit MPAutoSelection;
    FStringNoInit characterName;
    FStringNoInit ArmPatchTexture;
    DECLARE_CLASS(UR6GameOptions,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6GameOptions)
};

enum ER6GameType
{
    RGM_AllMode             =0,
    RGM_StoryMode           =1,
    RGM_PracticeMode        =2,
    RGM_MissionMode         =3,
    RGM_TerroristHuntMode   =4,
    RGM_TerroristHuntCoopMode=5,
    RGM_HostageRescueMode   =6,
    RGM_HostageRescueCoopMode=7,
    RGM_HostageRescueAdvMode=8,
    RGM_DefendMode          =9,
    RGM_DefendCoopMode      =10,
    RGM_ReconMode           =11,
    RGM_ReconCoopMode       =12,
    RGM_DeathmatchMode      =13,
    RGM_TeamDeathmatchMode  =14,
    RGM_BombAdvMode         =15,
    RGM_EscortAdvMode       =16,
    RGM_LoneWolfMode        =17,
    RGM_SquadDeathmatch     =18,
    RGM_SquadTeamDeathmatch =19,
    RGM_TerroristHuntAdvMode=20,
    RGM_ScatteredHuntAdvMode=21,
    RGM_CaptureTheEnemyAdvMode=22,
    RGM_CountDownMode       =23,
    RGM_KamikazeMode        =24,
    RGM_NoRulesMode         =25,
    RGM_MAX                 =26,
};
#define UCONST_C_iR6ModVersion 1

class ENGINE_API UR6Mod : public UObject
{
public:
    INT version;
    BITFIELD m_bInstalled:1 GCC_PACK(4);
    FLOAT m_fPriority GCC_PACK(4);
    TArrayNoInit<FString> m_ALocFile;
    TArrayNoInit<FString> m_aExtraPaths;
    TArrayNoInit<FString> m_aDescriptionPackage;
    TArrayNoInit<BYTE> m_eGameTypes;
    FStringNoInit m_szKeyWord;
    FStringNoInit m_szName;
    FStringNoInit m_szModInfo;
    FStringNoInit m_szGameServiceGameName;
    FStringNoInit m_szCampaignDir;
    FStringNoInit m_szPlayerCustomMission;
    FStringNoInit m_szServerIni;
    FStringNoInit m_szCampaignIniFile;
    FStringNoInit m_szBackgroundRootDir;
    FStringNoInit m_szVideosRootDir;
    FStringNoInit m_szIniFilesDir;
    FStringNoInit m_szCreditsFile;
    FStringNoInit m_szMenuDefinesFile;
    DECLARE_CLASS(UR6Mod,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6Mod)
};

enum ER6GameType
{
    RGM_AllMode             =0,
    RGM_StoryMode           =1,
    RGM_PracticeMode        =2,
    RGM_MissionMode         =3,
    RGM_TerroristHuntMode   =4,
    RGM_TerroristHuntCoopMode=5,
    RGM_HostageRescueMode   =6,
    RGM_HostageRescueCoopMode=7,
    RGM_HostageRescueAdvMode=8,
    RGM_DefendMode          =9,
    RGM_DefendCoopMode      =10,
    RGM_ReconMode           =11,
    RGM_ReconCoopMode       =12,
    RGM_DeathmatchMode      =13,
    RGM_TeamDeathmatchMode  =14,
    RGM_BombAdvMode         =15,
    RGM_EscortAdvMode       =16,
    RGM_LoneWolfMode        =17,
    RGM_SquadDeathmatch     =18,
    RGM_SquadTeamDeathmatch =19,
    RGM_TerroristHuntAdvMode=20,
    RGM_ScatteredHuntAdvMode=21,
    RGM_CaptureTheEnemyAdvMode=22,
    RGM_CountDownMode       =23,
    RGM_KamikazeMode        =24,
    RGM_NoRulesMode         =25,
    RGM_MAX                 =26,
};

struct UR6ModMgr_eventGetModName_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetModKeyword_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetServerIni_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetGameServiceGameName_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetUbiComClientVersion_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetPlayerCustomMission_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetIniFilesDir_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetCampaignDir_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetVideosRoot_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventGetBackgroundsRoot_Parms
{
    FString ReturnValue;
};
struct UR6ModMgr_eventAssertOnlyMP_Parms
{
    FString szDebug;
};
struct UR6ModMgr_eventAssertOnlyRS_Parms
{
    FString szDebug;
};
struct UR6ModMgr_eventSetPendingMODFromGSName_Parms
{
    FString GSGameName;
};
struct UR6ModMgr_eventInitAllModObjects_Parms
{
};
struct UR6ModMgr_eventSetCurrentMod_Parms
{
    FString szKeyWord;
    BITFIELD bInitSystem;
    class UConsole* pConsole;
    class ULevel* pLevel;
};
struct UR6ModMgr_eventInitModMgr_Parms
{
};
struct UR6ModMgr_eventIsRavenShield_Parms
{
    BITFIELD ReturnValue;
};
struct UR6ModMgr_eventIsMissionPack_Parms
{
    BITFIELD ReturnValue;
};
struct UR6ModMgr_eventGetNbMods_Parms
{
    INT ReturnValue;
};
class ENGINE_API UR6ModMgr : public UObject
{
public:
    BITFIELD bShowLog:1 GCC_PACK(4);
    class UR6UPackageMgr* m_pUPackageMgr GCC_PACK(4);
    class UR6Mod* m_pCurrentMod;
    class UR6Mod* m_pMP1;
    class UR6Mod* m_pMP2;
    class UR6Mod* m_pRVS;
    TArrayNoInit<class UR6Mod*> m_aMods;
    TArrayNoInit<class UObject*> m_aObjects;
    FStringNoInit m_szPendingModName;
    DECLARE_FUNCTION(execCallSndEngineInit);
    DECLARE_FUNCTION(execSetSystemMod);
    DECLARE_FUNCTION(execAddNewModExtraPath);
    FString eventGetModName()
    {
        UR6ModMgr_eventGetModName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetModName),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetModKeyword()
    {
        UR6ModMgr_eventGetModKeyword_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetModKeyword),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetServerIni()
    {
        UR6ModMgr_eventGetServerIni_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetServerIni),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetGameServiceGameName()
    {
        UR6ModMgr_eventGetGameServiceGameName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGameServiceGameName),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetUbiComClientVersion()
    {
        UR6ModMgr_eventGetUbiComClientVersion_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetUbiComClientVersion),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetPlayerCustomMission()
    {
        UR6ModMgr_eventGetPlayerCustomMission_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPlayerCustomMission),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetIniFilesDir()
    {
        UR6ModMgr_eventGetIniFilesDir_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetIniFilesDir),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetCampaignDir()
    {
        UR6ModMgr_eventGetCampaignDir_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCampaignDir),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetVideosRoot()
    {
        UR6ModMgr_eventGetVideosRoot_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetVideosRoot),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetBackgroundsRoot()
    {
        UR6ModMgr_eventGetBackgroundsRoot_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBackgroundsRoot),&Parms);
        return Parms.ReturnValue;
    }
    void eventAssertOnlyMP(const FString& szDebug)
    {
        UR6ModMgr_eventAssertOnlyMP_Parms Parms;
        Parms.szDebug=szDebug;
        ProcessEvent(FindFunctionChecked(ENGINE_AssertOnlyMP),&Parms);
    }
    void eventAssertOnlyRS(const FString& szDebug)
    {
        UR6ModMgr_eventAssertOnlyRS_Parms Parms;
        Parms.szDebug=szDebug;
        ProcessEvent(FindFunctionChecked(ENGINE_AssertOnlyRS),&Parms);
    }
    void eventSetPendingMODFromGSName(const FString& GSGameName)
    {
        UR6ModMgr_eventSetPendingMODFromGSName_Parms Parms;
        Parms.GSGameName=GSGameName;
        ProcessEvent(FindFunctionChecked(ENGINE_SetPendingMODFromGSName),&Parms);
    }
    void eventInitAllModObjects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitAllModObjects),NULL);
    }
    void eventSetCurrentMod(const FString& szKeyWord, BITFIELD bInitSystem, class UConsole* pConsole, class ULevel* pLevel)
    {
        UR6ModMgr_eventSetCurrentMod_Parms Parms;
        Parms.szKeyWord=szKeyWord;
        Parms.bInitSystem=bInitSystem;
        Parms.pConsole=pConsole;
        Parms.pLevel=pLevel;
        ProcessEvent(FindFunctionChecked(ENGINE_SetCurrentMod),&Parms);
    }
    void eventInitModMgr()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitModMgr),NULL);
    }
    BITFIELD eventIsRavenShield()
    {
        UR6ModMgr_eventIsRavenShield_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsRavenShield),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventIsMissionPack()
    {
        UR6ModMgr_eventIsMissionPack_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsMissionPack),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetNbMods()
    {
        UR6ModMgr_eventGetNbMods_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNbMods),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UR6ModMgr,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6ModMgr)
};

enum ER6GameType
{
    RGM_AllMode             =0,
    RGM_StoryMode           =1,
    RGM_PracticeMode        =2,
    RGM_MissionMode         =3,
    RGM_TerroristHuntMode   =4,
    RGM_TerroristHuntCoopMode=5,
    RGM_HostageRescueMode   =6,
    RGM_HostageRescueCoopMode=7,
    RGM_HostageRescueAdvMode=8,
    RGM_DefendMode          =9,
    RGM_DefendCoopMode      =10,
    RGM_ReconMode           =11,
    RGM_ReconCoopMode       =12,
    RGM_DeathmatchMode      =13,
    RGM_TeamDeathmatchMode  =14,
    RGM_BombAdvMode         =15,
    RGM_EscortAdvMode       =16,
    RGM_LoneWolfMode        =17,
    RGM_SquadDeathmatch     =18,
    RGM_SquadTeamDeathmatch =19,
    RGM_TerroristHuntAdvMode=20,
    RGM_ScatteredHuntAdvMode=21,
    RGM_CaptureTheEnemyAdvMode=22,
    RGM_CountDownMode       =23,
    RGM_KamikazeMode        =24,
    RGM_NoRulesMode         =25,
    RGM_MAX                 =26,
};
#define UCONST_C_iR6MissionDescriptionVersion 3

struct UR6MissionDescription_eventGetSkins_Parms
{
    FString szGameTypeClass;
    FString szGreen;
    FString szRed;
    BITFIELD ReturnValue;
};
struct UR6MissionDescription_eventInit_Parms
{
    class ALevelInfo* aLevel;
    FString szMissionFile;
    BITFIELD ReturnValue;
};
struct UR6MissionDescription_eventReset_Parms
{
};
class ENGINE_API UR6MissionDescription : public UObject
{
public:
    INT version;
    BITFIELD m_bCampaignMission:1 GCC_PACK(4);
    BITFIELD m_bIsLocked:1;
    class USound* m_PlayEventControl GCC_PACK(4);
    class USound* m_PlayEventClark;
    class USound* m_PlayEventSweeney;
    class USound* m_PlayMissionIntro;
    class USound* m_PlayMissionExtro;
    class UTexture* m_TMissionOverview;
    class UTexture* m_TWorldMap;
    TArrayNoInit<FGameTypeMaxPlayer> GameTypes;
    TArrayNoInit<BYTE> m_eGameTypes;
    TArrayNoInit<class UClass*> m_MissionArmorTypes;
    TArrayNoInit<FGameTypeSkin> SkinsPerGameTypes;
    FRegion m_RMissionOverview;
    FRegion m_RWorldMap;
    FStringNoInit m_missionIniFile;
    FStringNoInit m_MapName;
    FStringNoInit m_ShortName;
    FStringNoInit mod;
    FStringNoInit LocalizationFile;
    FStringNoInit m_AudioBankName;
    FStringNoInit m_InGameVoiceClarkBankName;
    BITFIELD eventGetSkins(const FString& szGameTypeClass, FString& szGreen, FString& szRed)
    {
        UR6MissionDescription_eventGetSkins_Parms Parms;
        Parms.ReturnValue=0;
        Parms.szGameTypeClass=szGameTypeClass;
        Parms.szGreen=szGreen;
        Parms.szRed=szRed;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSkins),&Parms);
        szGreen=Parms.szGreen;
        szRed=Parms.szRed;
        return Parms.ReturnValue;
    }
    BITFIELD eventInit(class ALevelInfo* aLevel, const FString& szMissionFile)
    {
        UR6MissionDescription_eventInit_Parms Parms;
        Parms.ReturnValue=0;
        Parms.aLevel=aLevel;
        Parms.szMissionFile=szMissionFile;
        ProcessEvent(FindFunctionChecked(ENGINE_Init),&Parms);
        return Parms.ReturnValue;
    }
    void eventReset()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Reset),NULL);
    }
    DECLARE_CLASS(UR6MissionDescription,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6MissionDescription)
};

enum EDoubleClickDir
{
    DCLICK_None             =0,
    DCLICK_Left             =1,
    DCLICK_Right            =2,
    DCLICK_Forward          =3,
    DCLICK_Back             =4,
    DCLICK_Active           =5,
    DCLICK_Done             =6,
    DCLICK_MAX              =7,
};

struct UPlayerInput_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
class ENGINE_API UPlayerInput : public UObject
{
public:
    BYTE MouseSmoothingMode;
    INT MouseSamples[2];
    BITFIELD bInvertMouse:1 GCC_PACK(4);
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bAdjustSampling:1;
    FLOAT MouseSensitivity GCC_PACK(4);
    FLOAT MouseSamplingTime;
    FLOAT SmoothedMouse[2];
    FLOAT ZeroTime[2];
    FLOAT SamplingTime[2];
    FLOAT MaybeTime[2];
    FLOAT OldSamples[4];
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
    void eventPlayerInput(FLOAT DeltaTime)
    {
        UPlayerInput_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};


struct UCheatManager_eventLogThis_Parms
{
    BITFIELD bDontTraceActor;
    class AActor* anActor;
};
class ENGINE_API UCheatManager : public UObject
{
public:
    BITFIELD m_bUnlockAllCheat:1 GCC_PACK(4);
    FRotator LockedRotation GCC_PACK(4);
    void eventLogThis(BITFIELD bDontTraceActor, class AActor* anActor)
    {
        UCheatManager_eventLogThis_Parms Parms;
        Parms.bDontTraceActor=bDontTraceActor;
        Parms.anActor=anActor;
        ProcessEvent(FindFunctionChecked(ENGINE_LogThis),&Parms);
    }
    DECLARE_CLASS(UCheatManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};


struct UCanvas_eventReset_Parms
{
};
class ENGINE_API UCanvas : public UObject
{
public:
    BYTE Style;
    INT SizeX;
    INT SizeY;
    INT m_hBink;
    INT m_iPosX;
    INT m_iPosY;
    INT m_iNewResolutionX;
    INT m_iNewResolutionY;
    BITFIELD bCenter:1 GCC_PACK(4);
    BITFIELD bNoSmooth:1;
    BITFIELD m_bPlaying:1;
    BITFIELD m_bForceMul2x:1;
    BITFIELD m_bDisplayGameOutroVideo:1;
    BITFIELD m_bChangeResRequested:1;
    BITFIELD m_bFading:1;
    BITFIELD m_bFadeAutoStop:1;
    FLOAT SpaceX GCC_PACK(4);
    FLOAT SpaceY;
    FLOAT OrgX;
    FLOAT OrgY;
    FLOAT ClipX;
    FLOAT ClipY;
    FLOAT HalfClipX;
    FLOAT HalfClipY;
    FLOAT CurX;
    FLOAT CurY;
    FLOAT Z;
    FLOAT CurYL;
    FLOAT m_fStretchX;
    FLOAT m_fStretchY;
    FLOAT m_fVirtualResX;
    FLOAT m_fVirtualResY;
    FLOAT m_fNormalClipX;
    FLOAT m_fNormalClipY;
    FLOAT m_fFadeTotalTime;
    FLOAT m_fFadeCurrentTime;
    class UFont* Font;
    class UFont* SmallFont;
    class UFont* MedFont;
    class UViewport* Viewport;
    class UMaterial* m_pWritableMapIconsTexture;
    FColor DrawColor;
    FColor m_FadeStartColor;
    FColor m_FadeEndColor;
    DECLARE_FUNCTION(execClipTextNative);
    DECLARE_FUNCTION(execDrawStretchedTextureSegmentNative);
    DECLARE_FUNCTION(execSetDrawColor);
    DECLARE_FUNCTION(execSetClip);
    DECLARE_FUNCTION(execSetOrigin);
    DECLARE_FUNCTION(execSetPos);
    DECLARE_FUNCTION(execSetVirtualSize);
    DECLARE_FUNCTION(execUseVirtualSize);
    DECLARE_FUNCTION(execDrawWritableMap);
    DECLARE_FUNCTION(execVideoStop);
    DECLARE_FUNCTION(execVideoPlay);
    DECLARE_FUNCTION(execVideoClose);
    DECLARE_FUNCTION(execVideoOpen);
    DECLARE_FUNCTION(execDraw3DLine);
    DECLARE_FUNCTION(execGetScreenCoordinate);
    DECLARE_FUNCTION(execSetMotionBlurIntensity);
    DECLARE_FUNCTION(execDrawPortal);
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execDrawTextClipped);
    DECLARE_FUNCTION(execDrawTileClipped);
    DECLARE_FUNCTION(execDrawActor);
    DECLARE_FUNCTION(execDrawTile);
    DECLARE_FUNCTION(execDrawText);
    DECLARE_FUNCTION(execStrLen);
    void eventReset()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Reset),NULL);
    }
    DECLARE_CLASS(UCanvas,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCanvas)
};


class ENGINE_API UCameraEffect : public UObject
{
public:
    BITFIELD FinalEffect:1 GCC_PACK(4);
    FLOAT Alpha GCC_PACK(4);
    DECLARE_CLASS(UCameraEffect,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCameraEffect)
};


class ENGINE_API UCameraOverlay : public UCameraEffect
{
public:
    class UMaterial* OverlayMaterial;
    FColor OverlayColor;
    DECLARE_CLASS(UCameraOverlay,UCameraEffect,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCameraOverlay)
};


class ENGINE_API UMotionBlur : public UCameraEffect
{
public:
    BYTE BlurAlpha;
    INT RenderTargets[2];
    FLOAT LastFrameTime;
    DECLARE_CLASS(UMotionBlur,UCameraEffect,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMotionBlur)
};


class ENGINE_API UI3DL2Listener : public UObject
{
public:
    INT Room;
    INT RoomHF;
    INT Reflections;
    INT Reverb;
    BITFIELD bDecayTimeScale:1 GCC_PACK(4);
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bDecayHFLimit:1;
    FLOAT EnvironmentSize GCC_PACK(4);
    FLOAT EnvironmentDiffusion;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT ReflectionsDelay;
    FLOAT ReverbDelay;
    FLOAT RoomRolloffFactor;
    FLOAT AirAbsorptionHF;
    INT Environment;
    INT Updated;
    DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UI3DL2Listener)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    INT IdealPlayerCount;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};


class ENGINE_API UReachSpec : public UObject
{
public:
    BYTE bPruned;
    INT Distance;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BITFIELD bForced:1 GCC_PACK(4);
    class ANavigationPoint* Start GCC_PACK(4);
    class ANavigationPoint* End;
    DECLARE_CLASS(UReachSpec,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

enum EGoCodeState
{
    GOCODESTATE_None        =0,
    GOCODESTATE_Waiting     =1,
    GOCODESTATE_Snipe       =2,
    GOCODESTATE_Breach      =3,
    GOCODESTATE_Done        =4,
    GOCODESTATE_MAX         =5,
};
#define UCONST_R6InputKey_NewNode 1025

class ENGINE_API UR6AbstractPlanningInfo : public UObject
{
public:
    BYTE m_eGoCodeState[4];
    BYTE m_eDefaultMode;
    BYTE m_eDefaultSpeed;
    BYTE m_eDefaultAction;
    BYTE m_eDefaultActionType;
    INT m_iCurrentNode;
    INT m_iCurrentPathIndex;
    INT m_iStartingPointNumber;
    INT m_iNbNode;
    INT m_iNbMilestone;
    INT DEB_iStartTime;
    BITFIELD m_bDisplayPath:1 GCC_PACK(4);
    BITFIELD m_bPlanningOver:1;
    BITFIELD m_bPlacedFirstPoint:1;
    BITFIELD bShowLog:1;
    BITFIELD bDisplayDbgInfo:1;
    FLOAT m_fReachRange GCC_PACK(4);
    FLOAT m_fZReachRange;
    class AActor* m_pTeamManager;
    TArrayNoInit<class AActor*> m_NodeList;
    FColor m_TeamColor;
    DECLARE_CLASS(UR6AbstractPlanningInfo,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6AbstractPlanningInfo)
};


class ENGINE_API UR6AbstractTerroristMgr : public UObject
{
public:
    DECLARE_CLASS(UR6AbstractTerroristMgr,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6AbstractTerroristMgr)
};


class ENGINE_API UR6FileManager : public UObject
{
public:
    TArrayNoInit<FString> m_pFileList;
    DECLARE_FUNCTION(execFindFile);
    DECLARE_FUNCTION(execDeleteFile);
    DECLARE_FUNCTION(execGetFileName);
    DECLARE_FUNCTION(execGetNbFile);
    DECLARE_CLASS(UR6FileManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6FileManager)
};


class ENGINE_API UKarmaParamsCollision : public UObject
{
public:
    FLOAT KScale;
    FLOAT KFriction;
    FLOAT KRestitution;
    FLOAT KImpactThreshold;
    FVector KScale3D;
    INT KarmaData;
    DECLARE_CLASS(UKarmaParamsCollision,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsCollision)
};


class ENGINE_API UKarmaParams : public UKarmaParamsCollision
{
public:
    BITFIELD KStartEnabled:1 GCC_PACK(4);
    BITFIELD bKNonSphericalInertia:1;
    BITFIELD bHighDetailOnly:1;
    BITFIELD bClientOnly:1;
    BITFIELD bKDoubleTickRate:1;
    BITFIELD bKStayUpright:1;
    BITFIELD bKAllowRotate:1;
    BITFIELD bDestroyOnSimError:1;
    FLOAT KMass GCC_PACK(4);
    FLOAT KLinearDamping;
    FLOAT KAngularDamping;
    FLOAT KBuoyancy;
    FLOAT KActorGravScale;
    FLOAT KVelDropBelowThreshold;
    FVector KStartLinVel;
    FVector KStartAngVel;
    INT KAng3;
    INT KTriList;
    FLOAT KLastVel;
    DECLARE_CLASS(UKarmaParams,UKarmaParamsCollision,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParams)
};


class ENGINE_API UKarmaParamsSkel : public UKarmaParams
{
public:
    BITFIELD bKDoConvulsions:1 GCC_PACK(4);
    FRange KConvulseSpacing GCC_PACK(4);
    FStringNoInit KSkeleton;
    BITFIELD bKImportantRagdoll:1 GCC_PACK(4);
    FLOAT KShotStrength GCC_PACK(4);
    FVector KShotStart;
    FVector KShotEnd;
    DECLARE_CLASS(UKarmaParamsSkel,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsSkel)
};


class ENGINE_API UKarmaParamsRBFull : public UKarmaParams
{
public:
    FLOAT KInertiaTensor[6];
    FVector KCOMOffset;
    DECLARE_CLASS(UKarmaParamsRBFull,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsRBFull)
};


class ENGINE_API UR6GameColors : public UObject
{
public:
    INT PopUpAlphaFactor;
    INT EditBoxSelectAllAlpha;
    INT DarkBGAlpha;
    FColor Black;
    FColor BlueLight;
    FColor Blue;
    FColor BlueDark;
    FColor Gold;
    FColor GrayDark;
    FColor GrayLight;
    FColor GreenLight;
    FColor Green;
    FColor GreenDark;
    FColor Orange;
    FColor RedLight;
    FColor Red;
    FColor RedDark;
    FColor White;
    FColor Yellow;
    FColor TeamHUDColor[3];
    FColor HUDWhite;
    FColor HUDGrey;
    FColor TeamColor[3];
    FColor TeamColorLight[3];
    FColor TeamColorDark[3];
    FColor ButtonTextColor[4];
    FColor ToolTipColor;
    FColor m_cBGPopUpContour;
    FColor m_cBGPopUpWindow;
    FColor m_ComboBGColor;
    FColor m_LisBoxNormalTextColor;
    FColor m_LisBoxSelectedTextColor;
    FColor m_LisBoxSeparatorTextColor;
    FColor m_LisBoxSelectionColor;
    FColor m_LisBoxDisabledTextColor;
    FColor m_LisBoxSpectatorTextColor;
    DECLARE_CLASS(UR6GameColors,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UR6GameColors)
};

#endif

AUTOGENERATE_FUNCTION(AActor,2609,execDrawText3D);
AUTOGENERATE_FUNCTION(AActor,2608,execDrawDashedLine);
AUTOGENERATE_FUNCTION(AActor,2610,execRenderLevelFromMe);
AUTOGENERATE_FUNCTION(AActor,2012,execSetFloorToDraw);
AUTOGENERATE_FUNCTION(AActor,2014,execInPlanningMode);
AUTOGENERATE_FUNCTION(AActor,2011,execSetPlanningMode);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,2723,execReturnSavedFadeValue);
AUTOGENERATE_FUNCTION(AActor,2722,execSaveCurrentFadeValue);
AUTOGENERATE_FUNCTION(AActor,2721,execFadeSound);
AUTOGENERATE_FUNCTION(AActor,2719,execStopAllSoundsActor);
AUTOGENERATE_FUNCTION(AActor,2717,execAddAndFindBankInSound);
AUTOGENERATE_FUNCTION(AActor,2716,execAddSoundBank);
AUTOGENERATE_FUNCTION(AActor,2712,execStopAllSounds);
AUTOGENERATE_FUNCTION(AActor,2705,execChangeVolumeType);
AUTOGENERATE_FUNCTION(AActor,2720,execResetVolume_TypeSound);
AUTOGENERATE_FUNCTION(AActor,2704,execResetVolume_AllTypeSound);
AUTOGENERATE_FUNCTION(AActor,2703,execIsPlayingSound);
AUTOGENERATE_FUNCTION(AActor,2725,execStopSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,1800,execFindSpot);
AUTOGENERATE_FUNCTION(AActor,1806,execR6Trace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAllMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKMakeRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveAllBoneLifters);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveLifterFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddBoneLifter);
AUTOGENERATE_FUNCTION(AActor,-1,execKFreezeRagdoll);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetSkelMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetSkelVel);
AUTOGENERATE_FUNCTION(AActor,-1,execKEnableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKDisableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetBlockKarma);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetStayUpright);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsAwake);
AUTOGENERATE_FUNCTION(AActor,-1,execKWake);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMPosition);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execOnlyAffectPawns);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,1501,execWasSkeletonUpdated);
AUTOGENERATE_FUNCTION(AActor,2208,execGetAnimBlendAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,2210,execUnLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,1500,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,1805,execClearChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execFreezeAnimAt);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,2607,execLoadRandomBackgroundImage);
AUTOGENERATE_FUNCTION(AActor,1523,execGlobalIDToBytes);
AUTOGENERATE_FUNCTION(AActor,1522,execGlobalIDToString);
AUTOGENERATE_FUNCTION(AActor,1520,execConvertIntTimeToString);
AUTOGENERATE_FUNCTION(AActor,1519,execGetMapNameExt);
AUTOGENERATE_FUNCTION(AActor,2622,execGarbageCollect);
AUTOGENERATE_FUNCTION(AActor,2621,execUpdateGraphicOptions);
AUTOGENERATE_FUNCTION(AActor,2620,execAddMessageToConsole);
AUTOGENERATE_FUNCTION(AActor,2619,execEnableLoadingScreen);
AUTOGENERATE_FUNCTION(AActor,2618,execGetCanvas);
AUTOGENERATE_FUNCTION(AActor,2617,execIsVideoHardwareAtLeast64M);
AUTOGENERATE_FUNCTION(AActor,1419,execGetGameVersion);
AUTOGENERATE_FUNCTION(AActor,1256,execConvertGameTypeIntToEnum);
AUTOGENERATE_FUNCTION(AActor,2616,execReplaceTexture);
AUTOGENERATE_FUNCTION(AActor,2613,execLoadLoadingScreen);
AUTOGENERATE_FUNCTION(AActor,1401,execSetPBStatus);
AUTOGENERATE_FUNCTION(AActor,1400,execIsPBClientEnabled);
AUTOGENERATE_FUNCTION(AActor,1312,execGetServerBeacon);
AUTOGENERATE_FUNCTION(AActor,1311,execSetServerBeacon);
AUTOGENERATE_FUNCTION(AActor,1302,execGetMissionDescription);
AUTOGENERATE_FUNCTION(AActor,1283,execSaveServerOptions);
AUTOGENERATE_FUNCTION(AActor,1273,execGetServerOptions);
AUTOGENERATE_FUNCTION(AActor,1305,execNativeNonUbiMatchMakingPassword);
AUTOGENERATE_FUNCTION(AActor,1304,execNativeNonUbiMatchMakingAddress);
AUTOGENERATE_FUNCTION(AActor,1303,execNativeNonUbiMatchMaking);
AUTOGENERATE_FUNCTION(AActor,1316,execNativeNonUbiMatchMakingHost);
AUTOGENERATE_FUNCTION(AActor,1200,execNativeStartedByGSClient);
AUTOGENERATE_FUNCTION(AActor,2615,execGetAvailableResolution);
AUTOGENERATE_FUNCTION(AActor,2614,execGetNbAvailableResolutions);
AUTOGENERATE_FUNCTION(AActor,1012,execGetTime);
AUTOGENERATE_FUNCTION(AActor,1009,execGetGameOptions);
AUTOGENERATE_FUNCTION(AActor,1524,execGetModMgr);
AUTOGENERATE_FUNCTION(AActor,1279,execSortFPlayerMenuInfo);
AUTOGENERATE_FUNCTION(AActor,1233,execSetPlayerSetupInfo);
AUTOGENERATE_FUNCTION(AActor,1232,execGetPlayerSetupInfo);
AUTOGENERATE_FUNCTION(AActor,1231,execSetFPlayerMenuInfo);
AUTOGENERATE_FUNCTION(AActor,1230,execGetFPlayerMenuInfo);
AUTOGENERATE_FUNCTION(AActor,1513,execIsAvailableInGameType);
AUTOGENERATE_FUNCTION(AActor,1801,execDbgAddLine);
AUTOGENERATE_FUNCTION(AActor,1506,execDbgVectorAdd);
AUTOGENERATE_FUNCTION(AActor,1505,execDbgVectorReset);
AUTOGENERATE_FUNCTION(AActor,2008,execGetTagInformations);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(AR6DecalManager,2901,execKillDecal);
AUTOGENERATE_FUNCTION(AR6DecalManager,2900,execAddDecal);
AUTOGENERATE_FUNCTION(AR6DecalGroup,2905,execDeActivateGroup);
AUTOGENERATE_FUNCTION(AR6DecalGroup,2904,execActivateGroup);
AUTOGENERATE_FUNCTION(AR6DecalGroup,2903,execKillDecal);
AUTOGENERATE_FUNCTION(AR6DecalGroup,2902,execAddDecal);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(ASceneManager,2909,execSceneDestroyed);
AUTOGENERATE_FUNCTION(ASceneManager,2906,execTerminateAIAction);
AUTOGENERATE_FUNCTION(ASceneManager,-1,execGetTotalSceneTime);
AUTOGENERATE_FUNCTION(APawn,-1,execIsAlive);
AUTOGENERATE_FUNCTION(APawn,-1,execIsNeutral);
AUTOGENERATE_FUNCTION(APawn,-1,execIsEnemy);
AUTOGENERATE_FUNCTION(APawn,-1,execIsFriend);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedDestination);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(UR6ModMgr,3003,execCallSndEngineInit);
AUTOGENERATE_FUNCTION(UR6ModMgr,2021,execSetSystemMod);
AUTOGENERATE_FUNCTION(UR6ModMgr,2020,execAddNewModExtraPath);
AUTOGENERATE_FUNCTION(UCanvas,2628,execClipTextNative);
AUTOGENERATE_FUNCTION(UCanvas,2627,execDrawStretchedTextureSegmentNative);
AUTOGENERATE_FUNCTION(UCanvas,2626,execSetDrawColor);
AUTOGENERATE_FUNCTION(UCanvas,2625,execSetClip);
AUTOGENERATE_FUNCTION(UCanvas,2624,execSetOrigin);
AUTOGENERATE_FUNCTION(UCanvas,2623,execSetPos);
AUTOGENERATE_FUNCTION(UCanvas,1607,execSetVirtualSize);
AUTOGENERATE_FUNCTION(UCanvas,1606,execUseVirtualSize);
AUTOGENERATE_FUNCTION(UCanvas,2800,execDrawWritableMap);
AUTOGENERATE_FUNCTION(UCanvas,2604,execVideoStop);
AUTOGENERATE_FUNCTION(UCanvas,2603,execVideoPlay);
AUTOGENERATE_FUNCTION(UCanvas,2602,execVideoClose);
AUTOGENERATE_FUNCTION(UCanvas,2601,execVideoOpen);
AUTOGENERATE_FUNCTION(UCanvas,2403,execDraw3DLine);
AUTOGENERATE_FUNCTION(UCanvas,2400,execGetScreenCoordinate);
AUTOGENERATE_FUNCTION(UCanvas,2005,execSetMotionBlurIntensity);
AUTOGENERATE_FUNCTION(UCanvas,480,execDrawPortal);
AUTOGENERATE_FUNCTION(UCanvas,470,execTextSize);
AUTOGENERATE_FUNCTION(UCanvas,469,execDrawTextClipped);
AUTOGENERATE_FUNCTION(UCanvas,468,execDrawTileClipped);
AUTOGENERATE_FUNCTION(UCanvas,467,execDrawActor);
AUTOGENERATE_FUNCTION(UCanvas,466,execDrawTile);
AUTOGENERATE_FUNCTION(UCanvas,465,execDrawText);
AUTOGENERATE_FUNCTION(UCanvas,464,execStrLen);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APlayerController,1320,execPB_CanPlayerSpawn);
AUTOGENERATE_FUNCTION(APlayerController,2714,execChangeVolumeTypeLinear);
AUTOGENERATE_FUNCTION(APlayerController,2713,execSetSoundOptions);
AUTOGENERATE_FUNCTION(APlayerController,2710,execSetKey);
AUTOGENERATE_FUNCTION(APlayerController,2709,execChangeInputSet);
AUTOGENERATE_FUNCTION(APlayerController,2708,execGetEnumName);
AUTOGENERATE_FUNCTION(APlayerController,2707,execGetActionKey);
AUTOGENERATE_FUNCTION(APlayerController,2706,execGetKey);
AUTOGENERATE_FUNCTION(APlayerController,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,1282,execSpecialDestroy);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,1318,execIsPBEnabled);
AUTOGENERATE_FUNCTION(APlayerController,1317,execGetPBConnectStatus);
AUTOGENERATE_FUNCTION(AController,-1,execEndClimbLadder);
AUTOGENERATE_FUNCTION(AController,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(AController,-1,execInLatentExecution);
AUTOGENERATE_FUNCTION(AController,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(AController,531,execPickTarget);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(AController,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(AController,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(AController,520,execactorReachable);
AUTOGENERATE_FUNCTION(AController,521,execpointReachable);
AUTOGENERATE_FUNCTION(AController,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(AController,522,execClearPaths);
AUTOGENERATE_FUNCTION(AController,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathTowardNearest);
AUTOGENERATE_FUNCTION(AController,517,execFindPathToward);
AUTOGENERATE_FUNCTION(AController,518,execFindPathTo);
AUTOGENERATE_FUNCTION(AController,533,execCanSee);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AController,508,execFinishRotation);
AUTOGENERATE_FUNCTION(AController,502,execMoveToward);
AUTOGENERATE_FUNCTION(AController,500,execMoveTo);
AUTOGENERATE_FUNCTION(AAIController,510,execWaitToSeeEnemy);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,1281,execSetCurrentMapNum);
AUTOGENERATE_FUNCTION(AGameInfo,1280,execGetCurrentMapNum);
AUTOGENERATE_FUNCTION(AGameInfo,1514,execProcessR6Availabilty);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,2612,execNotifyMatchStart);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,1319,execPBNotifyServerTravel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,1518,execGetCampaignNameFromParam);
AUTOGENERATE_FUNCTION(ALevelInfo,1516,execCallLogThisActor);
AUTOGENERATE_FUNCTION(ALevelInfo,1515,execResetLevelInNative);
AUTOGENERATE_FUNCTION(ALevelInfo,1604,execFinalizeLoading);
AUTOGENERATE_FUNCTION(ALevelInfo,2711,execSetBankSound);
AUTOGENERATE_FUNCTION(ALevelInfo,1608,execAddWritableMapIcon);
AUTOGENERATE_FUNCTION(ALevelInfo,2802,execAddEncodedWritableMapStrip);
AUTOGENERATE_FUNCTION(ALevelInfo,2801,execAddWritableMapPoint);
AUTOGENERATE_FUNCTION(AR6ColBox,1503,execEnableCollision);
AUTOGENERATE_FUNCTION(UR6FileManager,1528,execFindFile);
AUTOGENERATE_FUNCTION(UR6FileManager,1527,execDeleteFile);
AUTOGENERATE_FUNCTION(UR6FileManager,1526,execGetFileName);
AUTOGENERATE_FUNCTION(UR6FileManager,1525,execGetNbFile);
AUTOGENERATE_FUNCTION(AKVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintTorque);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintForce);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKUpdateConstraintParams);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
